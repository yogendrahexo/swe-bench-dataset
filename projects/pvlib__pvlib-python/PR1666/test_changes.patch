diff --git a/pvlib/tests/bifacial/test_infinite_sheds.py b/pvlib/tests/bifacial/test_infinite_sheds.py
--- a/pvlib/tests/bifacial/test_infinite_sheds.py
+++ b/pvlib/tests/bifacial/test_infinite_sheds.py
@@ -5,7 +5,6 @@
 import numpy as np
 import pandas as pd
 from pvlib.bifacial import infinite_sheds
-from pvlib.tools import cosd
 from ..conftest import assert_series_equal
 
 import pytest
@@ -42,116 +41,6 @@ def test_system():
     return syst, pts, vfs_ground_sky
 
 
-@pytest.mark.parametrize("vectorize", [True, False])
-def test__vf_ground_sky_integ(test_system, vectorize):
-    ts, pts, vfs_gnd_sky = test_system
-    # pass rotation here since max_rows=1 for the hand-solved case in
-    # the fixture test_system, which means the ground-to-sky view factor
-    # isn't summed over enough rows for symmetry to hold.
-    vf_integ = infinite_sheds._vf_ground_sky_integ(
-        ts['rotation'], ts['surface_azimuth'],
-        ts['gcr'], ts['height'], ts['pitch'],
-        max_rows=1, npoints=3, vectorize=vectorize)
-    expected_vf_integ = np.trapz(vfs_gnd_sky, pts)
-    assert np.isclose(vf_integ, expected_vf_integ, rtol=0.1)
-
-
-def test__vf_row_sky_integ(test_system):
-    ts, _, _ = test_system
-    gcr = ts['gcr']
-    surface_tilt = ts['surface_tilt']
-    f_x = np.array([0., 0.5, 1.])
-    shaded = []
-    noshade = []
-    for x in f_x:
-        s, ns = infinite_sheds._vf_row_sky_integ(
-            x, surface_tilt, gcr, npoints=100)
-        shaded.append(s)
-        noshade.append(ns)
-
-    def analytic(gcr, surface_tilt, x):
-        c = cosd(surface_tilt)
-        a = 1. / gcr
-        dx = np.sqrt(a**2 - 2 * a * c * x + x**2)
-        return - a * (c**2 - 1) * np.arctanh((x - a * c) / dx) - c * dx
-
-    expected_shade = 0.5 * (f_x * cosd(surface_tilt)
-                            - analytic(gcr, surface_tilt, 1 - f_x)
-                            + analytic(gcr, surface_tilt, 1.))
-    expected_noshade = 0.5 * ((1 - f_x) * cosd(surface_tilt)
-                              + analytic(gcr, surface_tilt, 1. - f_x)
-                              - analytic(gcr, surface_tilt, 0.))
-    shaded = np.array(shaded)
-    noshade = np.array(noshade)
-    assert np.allclose(shaded, expected_shade)
-    assert np.allclose(noshade, expected_noshade)
-
-
-def test__poa_sky_diffuse_pv():
-    dhi = np.array([np.nan, 0.0, 500.])
-    f_x = np.array([0.2, 0.2, 0.5])
-    vf_shade_sky_integ = np.array([1.0, 0.5, 0.2])
-    vf_noshade_sky_integ = np.array([0.0, 0.5, 0.8])
-    poa = infinite_sheds._poa_sky_diffuse_pv(
-        f_x, dhi, vf_shade_sky_integ, vf_noshade_sky_integ)
-    expected_poa = np.array([np.nan, 0.0, 500 * (0.5 * 0.2 + 0.5 * 0.8)])
-    assert np.allclose(poa, expected_poa, equal_nan=True)
-
-
-def test__ground_angle(test_system):
-    ts, _, _ = test_system
-    x = np.array([0., 0.5, 1.0])
-    angles = infinite_sheds._ground_angle(
-        x, ts['surface_tilt'], ts['gcr'])
-    expected_angles = np.array([0., 5.866738789543952, 9.896090638982903])
-    assert np.allclose(angles, expected_angles)
-
-
-def test__ground_angle_zero_gcr():
-    surface_tilt = 30.0
-    x = np.array([0.0, 0.5, 1.0])
-    angles = infinite_sheds._ground_angle(x, surface_tilt, 0)
-    expected_angles = np.array([0, 0, 0])
-    assert np.allclose(angles, expected_angles)
-
-
-def test__vf_row_ground(test_system):
-    ts, _, _ = test_system
-    x = np.array([0., 0.5, 1.0])
-    sqr3 = np.sqrt(3)
-    vfs = infinite_sheds._vf_row_ground(
-        x, ts['surface_tilt'], ts['gcr'])
-    expected_vfs = np.array([
-        0.5 * (1. - sqr3 / 2),
-        0.5 * ((4 + sqr3 / 2) / np.sqrt(17 + 4 * sqr3) - sqr3 / 2),
-        0.5 * ((4 + sqr3) / np.sqrt(20 + 8 * sqr3) - sqr3 / 2)])
-    assert np.allclose(vfs, expected_vfs)
-
-
-def test__vf_row_ground_integ(test_system):
-    ts, _, _ = test_system
-    gcr = ts['gcr']
-    surface_tilt = ts['surface_tilt']
-    f_x = np.array([0., 0.5, 1.0])
-    shaded, noshade = infinite_sheds._vf_row_ground_integ(
-        f_x, surface_tilt, gcr)
-
-    def analytic(x, surface_tilt, gcr):
-        c = cosd(surface_tilt)
-        a = 1. / gcr
-        dx = np.sqrt(a**2 + 2 * a * c * x + x**2)
-        return c * dx - a * (c**2 - 1) * np.arctanh((a * c + x) / dx)
-
-    expected_shade = 0.5 * (analytic(f_x, surface_tilt, gcr)
-                            - analytic(0., surface_tilt, gcr)
-                            - f_x * cosd(surface_tilt))
-    expected_noshade = 0.5 * (analytic(1., surface_tilt, gcr)
-                              - analytic(f_x, surface_tilt, gcr)
-                              - (1. - f_x) * cosd(surface_tilt))
-    assert np.allclose(shaded, expected_shade)
-    assert np.allclose(noshade, expected_noshade)
-
-
 def test__poa_ground_shadows():
     poa_ground, f_gnd_beam, df, vf_gnd_sky = (300., 0.5, 0.5, 0.2)
     result = infinite_sheds._poa_ground_shadows(
diff --git a/pvlib/tests/bifacial/test_utils.py b/pvlib/tests/bifacial/test_utils.py
--- a/pvlib/tests/bifacial/test_utils.py
+++ b/pvlib/tests/bifacial/test_utils.py
@@ -4,6 +4,8 @@
 import numpy as np
 import pytest
 from pvlib.bifacial import utils
+from pvlib.shading import masking_angle, ground_angle
+from pvlib.tools import cosd
 
 
 @pytest.fixture
@@ -79,10 +81,105 @@ def test__unshaded_ground_fraction(
 def test__vf_ground_sky_2d(test_system_fixed_tilt):
     # vector input
     ts, pts, vfs_gnd_sky = test_system_fixed_tilt
-    vfs = utils._vf_ground_sky_2d(pts, ts['rotation'], ts['gcr'],
-                                  ts['pitch'], ts['height'], max_rows=1)
+    vfs = utils.vf_ground_sky_2d(ts['rotation'], ts['gcr'], pts,
+                                 ts['pitch'], ts['height'], max_rows=1)
     assert np.allclose(vfs, vfs_gnd_sky, rtol=0.1)  # middle point vf is off
     # test with singleton x
-    vf = utils._vf_ground_sky_2d(pts[0], ts['rotation'], ts['gcr'],
-                                 ts['pitch'], ts['height'], max_rows=1)
+    vf = utils.vf_ground_sky_2d(ts['rotation'], ts['gcr'], pts[0],
+                                ts['pitch'], ts['height'], max_rows=1)
     assert np.isclose(vf, vfs_gnd_sky[0])
+
+
+@pytest.mark.parametrize("vectorize", [True, False])
+def test_vf_ground_sky_2d_integ(test_system_fixed_tilt, vectorize):
+    ts, pts, vfs_gnd_sky = test_system_fixed_tilt
+    # pass rotation here since max_rows=1 for the hand-solved case in
+    # the fixture test_system, which means the ground-to-sky view factor
+    # isn't summed over enough rows for symmetry to hold.
+    vf_integ = utils.vf_ground_sky_2d_integ(
+        ts['rotation'], ts['gcr'], ts['height'], ts['pitch'],
+        max_rows=1, npoints=3, vectorize=vectorize)
+    expected_vf_integ = np.trapz(vfs_gnd_sky, pts, axis=0)
+    assert np.isclose(vf_integ, expected_vf_integ, rtol=0.1)
+
+
+def test_vf_row_sky_2d(test_system_fixed_tilt):
+    ts, _, _ = test_system_fixed_tilt
+    # with float input, fx at top of row
+    vf = utils.vf_row_sky_2d(ts['surface_tilt'], ts['gcr'], 1.)
+    expected = 0.5 * (1 + cosd(ts['surface_tilt']))
+    assert np.isclose(vf, expected)
+    # with array input
+    fx = np.array([0., 0.5, 1.])
+    vf = utils.vf_row_sky_2d(ts['surface_tilt'], ts['gcr'], fx)
+    phi = masking_angle(ts['surface_tilt'], ts['gcr'], fx)
+    expected = 0.5 * (1 + cosd(ts['surface_tilt'] + phi))
+    assert np.allclose(vf, expected)
+
+
+def test_vf_row_sky_2d_integ(test_system_fixed_tilt):
+    ts, _, _ = test_system_fixed_tilt
+    # with float input, check end position
+    vf = utils.vf_row_sky_2d_integ(ts['surface_tilt'], ts['gcr'], 1., 1.)
+    expected = utils.vf_row_sky_2d(ts['surface_tilt'], ts['gcr'], 1.)
+    assert np.isclose(vf, expected)
+    # with array input
+    fx0 = np.array([0., 0.5])
+    fx1 = np.array([0., 0.8])
+    vf = utils.vf_row_sky_2d_integ(ts['surface_tilt'], ts['gcr'], fx0, fx1)
+    phi = masking_angle(ts['surface_tilt'], ts['gcr'], fx0[0])
+    y0 = 0.5 * (1 + cosd(ts['surface_tilt'] + phi))
+    x = np.arange(fx0[1], fx1[1], 1e-4)
+    phi_y = masking_angle(ts['surface_tilt'], ts['gcr'], x)
+    y = 0.5 * (1 + cosd(ts['surface_tilt'] + phi_y))
+    y1 = np.trapz(y, x) / (fx1[1] - fx0[1])
+    expected = np.array([y0, y1])
+    assert np.allclose(vf, expected, rtol=1e-3)
+    # with defaults (0, 1)
+    vf = utils.vf_row_sky_2d_integ(ts['surface_tilt'], ts['gcr'])
+    x = np.arange(0, 1, 1e-4)
+    phi_y = masking_angle(ts['surface_tilt'], ts['gcr'], x)
+    y = 0.5 * (1 + cosd(ts['surface_tilt'] + phi_y))
+    y1 = np.trapz(y, x) / (1 - 0)
+    assert np.allclose(vf, y1, rtol=1e-3)
+
+
+def test_vf_row_ground_2d(test_system_fixed_tilt):
+    ts, _, _ = test_system_fixed_tilt
+    # with float input, fx at bottom of row
+    vf = utils.vf_row_ground_2d(ts['surface_tilt'], ts['gcr'], 0.)
+    expected = 0.5 * (1. - cosd(ts['surface_tilt']))
+    assert np.isclose(vf, expected)
+    # with array input
+    fx = np.array([0., 0.5, 1.0])
+    vf = utils.vf_row_ground_2d(ts['surface_tilt'], ts['gcr'], fx)
+    phi = ground_angle(ts['surface_tilt'], ts['gcr'], fx)
+    expected = 0.5 * (1 - cosd(phi - ts['surface_tilt']))
+    assert np.allclose(vf, expected)
+
+
+def test_vf_ground_2d_integ(test_system_fixed_tilt):
+    ts, _, _ = test_system_fixed_tilt
+    # with float input, check end position
+    vf = utils.vf_row_ground_2d_integ(ts['surface_tilt'], ts['gcr'], 0., 0.)
+    expected = utils.vf_row_ground_2d(ts['surface_tilt'], ts['gcr'], 0.)
+    assert np.isclose(vf, expected)
+    # with array input
+    fx0 = np.array([0., 0.5])
+    fx1 = np.array([0., 0.8])
+    vf = utils.vf_row_ground_2d_integ(ts['surface_tilt'], ts['gcr'], fx0, fx1)
+    phi = ground_angle(ts['surface_tilt'], ts['gcr'], fx0[0])
+    y0 = 0.5 * (1 - cosd(phi - ts['surface_tilt']))
+    x = np.arange(fx0[1], fx1[1], 1e-4)
+    phi_y = ground_angle(ts['surface_tilt'], ts['gcr'], x)
+    y = 0.5 * (1 - cosd(phi_y - ts['surface_tilt']))
+    y1 = np.trapz(y, x) / (fx1[1] - fx0[1])
+    expected = np.array([y0, y1])
+    assert np.allclose(vf, expected, rtol=1e-2)
+    # with defaults (0, 1)
+    vf = utils.vf_row_ground_2d_integ(ts['surface_tilt'], ts['gcr'], 0, 1)
+    x = np.arange(0, 1, 1e-4)
+    phi_y = ground_angle(ts['surface_tilt'], ts['gcr'], x)
+    y = 0.5 * (1 - cosd(phi_y - ts['surface_tilt']))
+    y1 = np.trapz(y, x) / (1 - 0)
+    assert np.allclose(vf, y1, rtol=1e-2)
diff --git a/pvlib/tests/test_shading.py b/pvlib/tests/test_shading.py
--- a/pvlib/tests/test_shading.py
+++ b/pvlib/tests/test_shading.py
@@ -7,6 +7,34 @@
 from pvlib import shading
 
 
+@pytest.fixture
+def test_system():
+    syst = {'height': 1.0,
+            'pitch': 2.,
+            'surface_tilt': 30.,
+            'surface_azimuth': 180.,
+            'rotation': -30.}  # rotation of right edge relative to horizontal
+    syst['gcr'] = 1.0 / syst['pitch']
+    return syst
+
+
+def test__ground_angle(test_system):
+    ts = test_system
+    x = np.array([0., 0.5, 1.0])
+    angles = shading.ground_angle(
+        ts['surface_tilt'], ts['gcr'], x)
+    expected_angles = np.array([0., 5.866738789543952, 9.896090638982903])
+    assert np.allclose(angles, expected_angles)
+
+
+def test__ground_angle_zero_gcr():
+    surface_tilt = 30.0
+    x = np.array([0.0, 0.5, 1.0])
+    angles = shading.ground_angle(surface_tilt, 0, x)
+    expected_angles = np.array([0, 0, 0])
+    assert np.allclose(angles, expected_angles)
+
+
 @pytest.fixture
 def surface_tilt():
     idx = pd.date_range('2019-01-01', freq='h', periods=3)
