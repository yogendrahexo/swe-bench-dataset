diff --git a/pvlib/tests/iotools/test_pvgis.py b/pvlib/tests/iotools/test_pvgis.py
--- a/pvlib/tests/iotools/test_pvgis.py
+++ b/pvlib/tests/iotools/test_pvgis.py
@@ -6,7 +6,7 @@
 import pandas as pd
 import pytest
 import requests
-from pvlib.iotools import get_pvgis_tmy
+from pvlib.iotools import get_pvgis_tmy, read_pvgis_tmy
 from conftest import DATA_DIR
 
 
@@ -70,7 +70,14 @@ def csv_meta(meta_expected):
 @pytest.mark.remote_data
 def test_get_pvgis_tmy(expected, month_year_expected, inputs_expected,
                        meta_expected):
-    data, months_selected, inputs, meta = get_pvgis_tmy(45, 8)
+    pvgis_data = get_pvgis_tmy(45, 8)
+    _compare_pvgis_tmy_json(expected, month_year_expected, inputs_expected,
+                            meta_expected, pvgis_data)
+
+
+def _compare_pvgis_tmy_json(expected, month_year_expected, inputs_expected,
+                            meta_expected, pvgis_data):
+    data, months_selected, inputs, meta = pvgis_data
     # check each column of output separately
     for outvar in meta_expected['outputs']['tmy_hourly']['variables'].keys():
         assert np.allclose(data[outvar], expected[outvar])
@@ -113,7 +120,12 @@ def test_get_pvgis_tmy_kwargs(userhorizon_expected):
 
 @pytest.mark.remote_data
 def test_get_pvgis_tmy_basic(expected, meta_expected):
-    data, _, _, _ = get_pvgis_tmy(45, 8, outputformat='basic')
+    pvgis_data = get_pvgis_tmy(45, 8, outputformat='basic')
+    _compare_pvgis_tmy_basic(expected, meta_expected, pvgis_data)
+
+
+def _compare_pvgis_tmy_basic(expected, meta_expected, pvgis_data):
+    data, _, _, _ = pvgis_data
     # check each column of output separately
     for outvar in meta_expected['outputs']['tmy_hourly']['variables'].keys():
         assert np.allclose(data[outvar], expected[outvar])
@@ -122,8 +134,14 @@ def test_get_pvgis_tmy_basic(expected, meta_expected):
 @pytest.mark.remote_data
 def test_get_pvgis_tmy_csv(expected, month_year_expected, inputs_expected,
                            meta_expected, csv_meta):
-    data, months_selected, inputs, meta = get_pvgis_tmy(
-        45, 8, outputformat='csv')
+    pvgis_data = get_pvgis_tmy(45, 8, outputformat='csv')
+    _compare_pvgis_tmy_csv(expected, month_year_expected, inputs_expected,
+                           meta_expected, csv_meta, pvgis_data)
+
+
+def _compare_pvgis_tmy_csv(expected, month_year_expected, inputs_expected,
+                           meta_expected, csv_meta, pvgis_data):
+    data, months_selected, inputs, meta = pvgis_data
     # check each column of output separately
     for outvar in meta_expected['outputs']['tmy_hourly']['variables'].keys():
         assert np.allclose(data[outvar], expected[outvar])
@@ -144,8 +162,12 @@ def test_get_pvgis_tmy_csv(expected, month_year_expected, inputs_expected,
 
 @pytest.mark.remote_data
 def test_get_pvgis_tmy_epw(expected, epw_meta):
-    data, _, _, meta = get_pvgis_tmy(
-        45, 8, outputformat='epw')
+    pvgis_data = get_pvgis_tmy(45, 8, outputformat='epw')
+    _compare_pvgis_tmy_epw(expected, epw_meta, pvgis_data)
+
+
+def _compare_pvgis_tmy_epw(expected, epw_meta, pvgis_data):
+    data, _, _, meta = pvgis_data
     assert np.allclose(data.ghi, expected['G(h)'])
     assert np.allclose(data.dni, expected['Gb(n)'])
     assert np.allclose(data.dhi, expected['Gd(h)'])
@@ -160,3 +182,73 @@ def test_get_pvgis_tmy_error():
         get_pvgis_tmy(45, 8, outputformat='bad')
     with pytest.raises(requests.HTTPError, match='404 Client Error'):
         get_pvgis_tmy(45, 8, url='https://re.jrc.ec.europa.eu/')
+
+
+def test_read_pvgis_tmy_json(expected, month_year_expected, inputs_expected,
+                             meta_expected):
+    fn = DATA_DIR / 'tmy_45.000_8.000_2005_2016.json'
+    # infer outputformat from file extensions
+    pvgis_data = read_pvgis_tmy(fn)
+    _compare_pvgis_tmy_json(expected, month_year_expected, inputs_expected,
+                            meta_expected, pvgis_data)
+    # explicit pvgis outputformat
+    pvgis_data = read_pvgis_tmy(fn, pvgis_format='json')
+    _compare_pvgis_tmy_json(expected, month_year_expected, inputs_expected,
+                            meta_expected, pvgis_data)
+    with fn.open('r') as fbuf:
+        pvgis_data = read_pvgis_tmy(fbuf, pvgis_format='json')
+        _compare_pvgis_tmy_json(expected, month_year_expected, inputs_expected,
+                                meta_expected, pvgis_data)
+
+
+def test_read_pvgis_tmy_epw(expected, epw_meta):
+    fn = DATA_DIR / 'tmy_45.000_8.000_2005_2016.epw'
+    # infer outputformat from file extensions
+    pvgis_data = read_pvgis_tmy(fn)
+    _compare_pvgis_tmy_epw(expected, epw_meta, pvgis_data)
+    # explicit pvgis outputformat
+    pvgis_data = read_pvgis_tmy(fn, pvgis_format='epw')
+    _compare_pvgis_tmy_epw(expected, epw_meta, pvgis_data)
+    with fn.open('r') as fbuf:
+        pvgis_data = read_pvgis_tmy(fbuf, pvgis_format='epw')
+        _compare_pvgis_tmy_epw(expected, epw_meta, pvgis_data)
+
+
+def test_read_pvgis_tmy_csv(expected, month_year_expected, inputs_expected,
+                            meta_expected, csv_meta):
+    fn = DATA_DIR / 'tmy_45.000_8.000_2005_2016.csv'
+    # infer outputformat from file extensions
+    pvgis_data = read_pvgis_tmy(fn)
+    _compare_pvgis_tmy_csv(expected, month_year_expected, inputs_expected,
+                           meta_expected, csv_meta, pvgis_data)
+    # explicit pvgis outputformat
+    pvgis_data = read_pvgis_tmy(fn, pvgis_format='csv')
+    _compare_pvgis_tmy_csv(expected, month_year_expected, inputs_expected,
+                           meta_expected, csv_meta, pvgis_data)
+    with fn.open('rb') as fbuf:
+        pvgis_data = read_pvgis_tmy(fbuf, pvgis_format='csv')
+        _compare_pvgis_tmy_csv(expected, month_year_expected, inputs_expected,
+                               meta_expected, csv_meta, pvgis_data)
+
+
+def test_read_pvgis_tmy_basic(expected, meta_expected):
+    fn = DATA_DIR / 'tmy_45.000_8.000_2005_2016.txt'
+    # XXX: can't infer outputformat from file extensions for basic
+    with pytest.raises(ValueError, match="pvgis format 'txt' was unknown"):
+        read_pvgis_tmy(fn)
+    # explicit pvgis outputformat
+    pvgis_data = read_pvgis_tmy(fn, pvgis_format='basic')
+    _compare_pvgis_tmy_basic(expected, meta_expected, pvgis_data)
+    with fn.open('rb') as fbuf:
+        pvgis_data = read_pvgis_tmy(fbuf, pvgis_format='basic')
+        _compare_pvgis_tmy_basic(expected, meta_expected, pvgis_data)
+        # file buffer raises TypeError if passed to pathlib.Path()
+        with pytest.raises(TypeError):
+            read_pvgis_tmy(fbuf)
+
+
+def test_read_pvgis_tmy_exception():
+    bad_outputformat = 'bad'
+    err_msg = "pvgis format '{:s}' was unknown".format(bad_outputformat)
+    with pytest.raises(ValueError, match=err_msg):
+        read_pvgis_tmy('filename', pvgis_format=bad_outputformat)
