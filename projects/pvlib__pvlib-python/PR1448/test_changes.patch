diff --git a/pvlib/tests/iotools/test_crn.py b/pvlib/tests/iotools/test_crn.py
--- a/pvlib/tests/iotools/test_crn.py
+++ b/pvlib/tests/iotools/test_crn.py
@@ -83,7 +83,7 @@ def test_read_crn_problems(testfile_problems, columns_mapped, dtypes):
                               '2020-07-06 13:10:00'],
                              freq=None).tz_localize('UTC')
     values = np.array([
-        [92821, 20200706, 1200, 20200706, 700, '3.0', -80.69, 28.62, 24.9,
+        [92821, 20200706, 1200, 20200706, 700, '3', -80.69, 28.62, 24.9,
          0.0, np.nan, 0, 25.5, 'C', 0, 93.0, 0, nan, nan, 990, 0, 1.57, 0],
         [92821, 20200706, 1310, 20200706, 810, '2.623', -80.69, 28.62,
          26.9, 0.0, 430.0, 0, 30.2, 'C', 0, 87.0, 0, nan, nan, 989, 0,
diff --git a/pvlib/tests/iotools/test_psm3.py b/pvlib/tests/iotools/test_psm3.py
--- a/pvlib/tests/iotools/test_psm3.py
+++ b/pvlib/tests/iotools/test_psm3.py
@@ -170,7 +170,7 @@ def test_read_psm3_map_variables():
     data, metadata = psm3.read_psm3(MANUAL_TEST_DATA, map_variables=True)
     columns_mapped = ['Year', 'Month', 'Day', 'Hour', 'Minute', 'dhi', 'dni',
                       'ghi', 'dhi_clear', 'dni_clear', 'ghi_clear',
-                      'Cloud Type', 'Dew Point', 'apparent_zenith',
+                      'Cloud Type', 'Dew Point', 'solar_zenith',
                       'Fill Flag', 'albedo', 'wind_speed',
                       'precipitable_water', 'wind_direction',
                       'relative_humidity', 'temp_air', 'pressure']
diff --git a/pvlib/tests/test_conftest.py b/pvlib/tests/test_conftest.py
--- a/pvlib/tests/test_conftest.py
+++ b/pvlib/tests/test_conftest.py
@@ -52,22 +52,21 @@ def test_use_fixture_with_decorator(some_data):
                                            'assert_frame_equal'])
 @pytest.mark.parametrize('pd_version', ['1.0.0', '1.1.0'])
 @pytest.mark.parametrize('check_less_precise', [True, False])
-def test__check_pandas_assert_kwargs(mocker, monkeypatch,
-                                     function_name, pd_version,
+def test__check_pandas_assert_kwargs(mocker, function_name, pd_version,
                                      check_less_precise):
     # test that conftest._check_pandas_assert_kwargs returns appropriate
     # kwargs for the assert_x_equal functions
 
-    # patch the pandas assert; not interested in actually calling them:
-    def patched_assert(*args, **kwargs):
-        pass
+    # NOTE: be careful about mixing mocker.patch and pytest.MonkeyPatch!
+    # they do not coordinate their cleanups, so it is safest to only
+    # use one or the other.  GH #1447
 
-    monkeypatch.setattr(pandas.testing, function_name, patched_assert)
-    # then attach a spy to it so we can see what args it is called with:
-    mocked_function = mocker.spy(pandas.testing, function_name)
+    # patch the pandas assert; not interested in actually calling them,
+    # plus we want to spy on how they get called.
+    spy = mocker.patch('pandas.testing.' + function_name)
     # patch pd.__version__ to exercise the two branches in
     # conftest._check_pandas_assert_kwargs
-    monkeypatch.setattr(pandas, '__version__', pd_version)
+    mocker.patch('pandas.__version__', new=pd_version)
 
     # finally, run the function and check what args got passed to pandas:
     assert_function = getattr(conftest, function_name)
@@ -79,4 +78,4 @@ def patched_assert(*args, **kwargs):
     else:
         expected_kwargs = {'check_less_precise': check_less_precise}
 
-    mocked_function.assert_called_with(*args, **expected_kwargs)
+    spy.assert_called_once_with(*args, **expected_kwargs)
