diff --git a/pvlib/tests/iotools/test_tmy.py b/pvlib/tests/iotools/test_tmy.py
--- a/pvlib/tests/iotools/test_tmy.py
+++ b/pvlib/tests/iotools/test_tmy.py
@@ -1,8 +1,10 @@
 import numpy as np
 import pandas as pd
 from pvlib.iotools import tmy
+from pvlib._deprecation import pvlibDeprecationWarning
 from ..conftest import DATA_DIR
 import pytest
+import warnings
 
 # test the API works
 from pvlib.iotools import read_tmy3
@@ -16,29 +18,60 @@
 
 
 def test_read_tmy3():
-    tmy.read_tmy3(TMY3_TESTFILE)
+    tmy.read_tmy3(TMY3_TESTFILE, map_variables=False)
 
 
 def test_read_tmy3_recolumn():
-    data, meta = tmy.read_tmy3(TMY3_TESTFILE)
+    with warnings.catch_warnings():
+        warnings.simplefilter("ignore")
+        data, meta = tmy.read_tmy3(TMY3_TESTFILE, recolumn=True)
     assert 'GHISource' in data.columns
 
 
 def test_read_tmy3_norecolumn():
-    data, _ = tmy.read_tmy3(TMY3_TESTFILE, recolumn=False)
+    data, _ = tmy.read_tmy3(TMY3_TESTFILE, map_variables=False)
     assert 'GHI source' in data.columns
 
 
+def test_read_tmy3_raise_valueerror():
+    with pytest.raises(ValueError, match='`map_variables` and `recolumn`'):
+        _ = tmy.read_tmy3(TMY3_TESTFILE, recolumn=True, map_variables=True)
+
+
+def test_read_tmy3_map_variables():
+    data, meta = tmy.read_tmy3(TMY3_TESTFILE, map_variables=True)
+    assert 'ghi' in data.columns
+    assert 'dni' in data.columns
+    assert 'dhi' in data.columns
+    assert 'pressure' in data.columns
+    assert 'wind_direction' in data.columns
+    assert 'wind_speed' in data.columns
+    assert 'temp_air' in data.columns
+    assert 'temp_dew' in data.columns
+    assert 'relative_humidity' in data.columns
+    assert 'albedo' in data.columns
+    assert 'ghi_extra' in data.columns
+    assert 'dni_extra' in data.columns
+    assert 'precipitable_water' in data.columns
+
+
+def test_read_tmy3_map_variables_deprecating_warning():
+    with pytest.warns(pvlibDeprecationWarning, match='names will be renamed'):
+        data, meta = tmy.read_tmy3(TMY3_TESTFILE)
+
+
 def test_read_tmy3_coerce_year():
     coerce_year = 1987
-    data, _ = tmy.read_tmy3(TMY3_TESTFILE, coerce_year=coerce_year)
+    data, _ = tmy.read_tmy3(TMY3_TESTFILE, coerce_year=coerce_year,
+                            map_variables=False)
     assert (data.index[:-1].year == 1987).all()
     assert data.index[-1].year == 1988
 
 
 def test_read_tmy3_no_coerce_year():
     coerce_year = None
-    data, _ = tmy.read_tmy3(TMY3_TESTFILE, coerce_year=coerce_year)
+    data, _ = tmy.read_tmy3(TMY3_TESTFILE, coerce_year=coerce_year,
+                            map_variables=False)
     assert 1997 and 1999 in data.index.year
     assert data.index[-2] == pd.Timestamp('1998-12-31 23:00:00-09:00')
     assert data.index[-1] == pd.Timestamp('1999-01-01 00:00:00-09:00')
@@ -50,7 +83,7 @@ def test_read_tmy2():
 
 def test_gh865_read_tmy3_feb_leapyear_hr24():
     """correctly parse the 24th hour if the tmy3 file has a leap year in feb"""
-    data, meta = read_tmy3(TMY3_FEB_LEAPYEAR)
+    data, meta = read_tmy3(TMY3_FEB_LEAPYEAR, map_variables=False)
     # just to be safe, make sure this _IS_ the Greensboro file
     greensboro = {
         'USAF': 723170,
@@ -66,7 +99,8 @@ def test_gh865_read_tmy3_feb_leapyear_hr24():
     assert data.index[1414] == pd.Timestamp('1996-02-28 23:00:00-0500')
     assert data.index[1415] == pd.Timestamp('1996-03-01 00:00:00-0500')
     # now check if it parses correctly when we try to coerce the year
-    data, _ = read_tmy3(TMY3_FEB_LEAPYEAR, coerce_year=1990)
+    data, _ = read_tmy3(TMY3_FEB_LEAPYEAR, coerce_year=1990,
+                        map_variables=False)
     # if get's here w/o an error, then gh865 is fixed, but let's check anyway
     assert all(data.index[:-1].year == 1990)
     assert data.index[-1].year == 1991
@@ -87,7 +121,7 @@ def test_solaranywhere_tmy3(solaranywhere_index):
     # The SolarAnywhere TMY3 format specifies midnight as 00:00 whereas the
     # NREL TMY3 format utilizes 24:00. The SolarAnywhere file is therefore
     # included to test files with  00:00 timestamps are parsed correctly
-    data, meta = tmy.read_tmy3(TMY3_SOLARANYWHERE)
+    data, meta = tmy.read_tmy3(TMY3_SOLARANYWHERE, map_variables=False)
     pd.testing.assert_index_equal(data.index, solaranywhere_index)
     assert meta['USAF'] == 0
     assert meta['Name'] == 'Burlington  United States'
diff --git a/pvlib/tests/test_location.py b/pvlib/tests/test_location.py
--- a/pvlib/tests/test_location.py
+++ b/pvlib/tests/test_location.py
@@ -212,7 +212,7 @@ def test_get_clearsky_valueerror(times):
 def test_from_tmy_3():
     from pvlib.tests.iotools.test_tmy import TMY3_TESTFILE
     from pvlib.iotools import read_tmy3
-    data, meta = read_tmy3(TMY3_TESTFILE)
+    data, meta = read_tmy3(TMY3_TESTFILE, map_variables=True)
     loc = Location.from_tmy(meta, data)
     assert loc.name is not None
     assert loc.altitude != 0
diff --git a/pvlib/tests/test_soiling.py b/pvlib/tests/test_soiling.py
--- a/pvlib/tests/test_soiling.py
+++ b/pvlib/tests/test_soiling.py
@@ -147,8 +147,9 @@ def test_hsu_variable_time_intervals(rainfall_input, expected_output_3):
 @pytest.fixture
 def greensboro_rain():
     # get TMY3 data with rain
-    greensboro, _ = read_tmy3(DATA_DIR / '723170TYA.CSV', coerce_year=1990)
-    return greensboro.Lprecipdepth
+    greensboro, _ = read_tmy3(DATA_DIR / '723170TYA.CSV', coerce_year=1990,
+                              map_variables=True)
+    return greensboro['Lprecip depth (mm)']
 
 
 @pytest.fixture
