diff --git a/pvlib/tests/test_snow.py b/pvlib/tests/test_snow.py
--- a/pvlib/tests/test_snow.py
+++ b/pvlib/tests/test_snow.py
@@ -6,6 +6,8 @@
 from pvlib import snow
 from pvlib.tools import sind
 
+import pytest
+
 
 def test_fully_covered_nrel():
     dt = pd.date_range(start="2019-1-1 12:00:00", end="2019-1-1 18:00:00",
@@ -108,6 +110,7 @@ def test__townsend_effective_snow():
 
 
 def test_loss_townsend():
+    # hand-calculated solution
     snow_total = np.array([25.4, 25.4, 12.7, 2.54, 0, 0, 0, 0, 0, 0, 12.7,
                            25.4])
     snow_events = np.array([2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 2, 3])
@@ -118,6 +121,7 @@ def test_loss_townsend():
     poa_global = np.array([350000, 350000, 350000, 350000, 350000, 350000,
                            350000, 350000, 350000, 350000, 350000, 350000])
     angle_of_repose = 40
+    string_factor = 1.0
     slant_height = 2.54
     lower_edge_height = 0.254
     expected = np.array([0.07696253, 0.07992262, 0.06216201, 0.01715392, 0, 0,
@@ -125,5 +129,84 @@ def test_loss_townsend():
     actual = snow.loss_townsend(snow_total, snow_events, surface_tilt,
                                 relative_humidity, temp_air,
                                 poa_global, slant_height,
-                                lower_edge_height, angle_of_repose)
+                                lower_edge_height, string_factor,
+                                angle_of_repose)
     np.testing.assert_allclose(expected, actual, rtol=1e-05)
+
+
+@pytest.mark.parametrize(
+    'poa_global,surface_tilt,slant_height,lower_edge_height,string_factor,expected',  # noQA: E501
+    [
+        (np.asarray(
+            [60., 80., 100., 125., 175., 225., 225., 210., 175., 125., 90.,
+             60.], dtype=float) * 1000.,
+         2.,
+         79. / 39.37,
+         3. / 39.37,
+         1.0,
+         np.asarray(
+            [44, 34, 20, 9, 3, 1, 0, 0, 0, 2, 6, 25], dtype=float)
+         ),
+        (np.asarray(
+            [60., 80., 100., 125., 175., 225., 225., 210., 175., 125., 90.,
+             60.], dtype=float) * 1000.,
+         5.,
+         316 / 39.37,
+         120. / 39.37,
+         0.75,
+         np.asarray(
+            [22, 16, 9, 4, 1, 0, 0, 0, 0, 1, 2, 12], dtype=float)
+         ),
+        (np.asarray(
+            [60., 80., 100., 125., 175., 225., 225., 210., 175., 125., 90.,
+             60.], dtype=float) * 1000.,
+         23.,
+         158 / 39.27,
+         12 / 39.37,
+         0.75,
+         np.asarray(
+            [28, 21, 13, 6, 2, 0, 0, 0, 0, 1, 4, 16], dtype=float)
+         ),
+        (np.asarray(
+            [80., 100., 125., 150., 225., 300., 300., 275., 225., 150., 115.,
+             80.], dtype=float) * 1000.,
+         52.,
+         39.5 / 39.37,
+         34. / 39.37,
+         0.75,
+         np.asarray(
+             [7, 5, 3, 1, 0, 0, 0, 0, 0, 0, 1, 4], dtype=float)
+         ),
+        (np.asarray(
+            [80., 100., 125., 150., 225., 300., 300., 275., 225., 150., 115.,
+             80.], dtype=float) * 1000.,
+         60.,
+         39.5 / 39.37,
+         25. / 39.37,
+         1.,
+         np.asarray(
+             [7, 5, 3, 1, 0, 0, 0, 0, 0, 0, 1, 3], dtype=float)
+         )
+    ]
+)
+def test_loss_townsend_cases(poa_global, surface_tilt, slant_height,
+                             lower_edge_height, string_factor, expected):
+    # test cases from Townsend, 1/27/2023, addeed by cwh
+    # snow_total in inches, convert to cm for pvlib
+    snow_total = np.asarray(
+        [20, 15, 10, 4, 1.5, 0, 0, 0, 0, 1.5, 4, 15], dtype=float) * 2.54
+    # snow events are an average for each month
+    snow_events = np.asarray(
+        [5, 4.2, 2.8, 1.3, 0.8, 0, 0, 0, 0, 0.5, 1.5, 4.5], dtype=float)
+    # air temperature in C
+    temp_air = np.asarray(
+        [-6., -2., 1., 4., 7., 10., 13., 16., 14., 12., 7., -3.], dtype=float)
+    # relative humidity in %
+    relative_humidity = np.asarray(
+        [78., 80., 75., 65., 60., 55., 55., 55., 50., 55., 60., 70.],
+        dtype=float)
+    actual = snow.loss_townsend(
+        snow_total, snow_events, surface_tilt, relative_humidity, temp_air,
+        poa_global, slant_height, lower_edge_height, string_factor)
+    actual = np.around(actual * 100)
+    assert np.allclose(expected, actual)
