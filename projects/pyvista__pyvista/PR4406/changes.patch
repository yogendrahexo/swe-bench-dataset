diff --git a/pyvista/core/filters/rectilinear_grid.py b/pyvista/core/filters/rectilinear_grid.py
--- a/pyvista/core/filters/rectilinear_grid.py
+++ b/pyvista/core/filters/rectilinear_grid.py
@@ -2,24 +2,29 @@
 
 import collections
 from typing import Sequence, Union
+import warnings
 
 import numpy as np
 
 from pyvista import _vtk, abstract_class
 from pyvista.core.filters import _get_output, _update_alg
+from pyvista.utilities import assert_empty_kwargs
+from pyvista.utilities.misc import PyVistaDeprecationWarning
 
 
 @abstract_class
 class RectilinearGridFilters:
     """An internal class to manage filters/algorithms for rectilinear grid datasets."""
 
+    # Note remove kwargs when removing deprecation for pass_cell_data
     def to_tetrahedra(
         self,
         tetra_per_cell: int = 5,
         mixed: Union[Sequence[int], bool] = False,
         pass_cell_ids: bool = True,
-        pass_cell_data: bool = True,
+        pass_data: bool = True,
         progress_bar: bool = False,
+        **kwargs,
     ):
         """Create a tetrahedral mesh structured grid.
 
@@ -46,7 +51,7 @@ def to_tetrahedra(
             :class:`pyvista.RectilinearGrid`. The name of this array is
             ``'vtkOriginalCellIds'`` within the ``cell_data``.
 
-        pass_cell_data : bool, default: True
+        pass_data : bool, default: True
             Set to ``True`` to make the tetrahedra mesh have the cell data from
             the original :class:`pyvista.RectilinearGrid`.  This uses
             ``pass_cell_ids=True`` internally. If ``True``, ``pass_cell_ids``
@@ -55,6 +60,9 @@ def to_tetrahedra(
         progress_bar : bool, default: False
             Display a progress bar to indicate progress.
 
+        **kwargs : dict, optional
+            Deprecated keyword argument ``pass_cell_data``.
+
         Returns
         -------
         pyvista.UnstructuredGrid
@@ -87,8 +95,17 @@ def to_tetrahedra(
         >>> tet_grid.explode(factor=0.5).plot(show_edges=True)
 
         """
+        # Note remove this section when deprecation is done
+        pass_cell_data = kwargs.pop("pass_cell_data", None)
+        assert_empty_kwargs(**kwargs)
+        if pass_cell_data is not None:
+            warnings.warn(
+                "pass_cell_data is a deprecated option, use pass_data", PyVistaDeprecationWarning
+            )
+            pass_data = pass_cell_data
+
         alg = _vtk.vtkRectilinearGridToTetrahedra()
-        alg.SetRememberVoxelId(pass_cell_ids or pass_cell_data)
+        alg.SetRememberVoxelId(pass_cell_ids or pass_data)
         if mixed is not False:
             if isinstance(mixed, str):
                 self.cell_data.active_scalars_name = mixed
@@ -116,16 +133,27 @@ def to_tetrahedra(
         alg.SetInputData(self)
         _update_alg(alg, progress_bar, 'Converting to tetrahedra')
         out = _get_output(alg)
-        if pass_cell_data:
+
+        if pass_data:
             # algorithm stores original cell ids in active scalars
+            # this does not preserve active scalars, but we need to
+            # keep active scalars until they are renamed
             for name in self.cell_data:  # type: ignore
                 if name != out.cell_data.active_scalars_name:
                     out[name] = self.cell_data[name][out.cell_data.active_scalars]  # type: ignore
 
+            for name in self.point_data:  # type: ignore
+                out[name] = self.point_data[name]  # type: ignore
+
         if alg.GetRememberVoxelId():
             # original cell_ids are not named and are the active scalars
             out.cell_data.set_array(
                 out.cell_data.pop(out.cell_data.active_scalars_name), 'vtkOriginalCellIds'
             )
 
+        if pass_data:
+            # Now reset active scalars in cast the original mesh had data with active scalars
+            association, name = self.active_scalars_info  # type: ignore
+            out.set_active_scalars(name, preference=association)
+
         return out
