diff --git a/tests/mappers/test_mapper.py b/tests/mappers/test_mapper.py
--- a/tests/mappers/test_mapper.py
+++ b/tests/mappers/test_mapper.py
@@ -25,6 +25,11 @@ def test_scalar_range(dataset_mapper):
     assert dataset_mapper.scalar_range == rng
 
 
+def test_bounds(dataset_mapper):
+    assert isinstance(dataset_mapper.bounds, tuple)
+    assert dataset_mapper.bounds == (-126.0, 125.0, -127.0, 126.0, -127.0, 127.0)
+
+
 def test_lookup_table(dataset_mapper):
     assert isinstance(dataset_mapper.lookup_table, vtk.vtkLookupTable)
 
diff --git a/tests/mappers/test_volume_mapper.py b/tests/mappers/test_volume_mapper.py
new file mode 100644
--- /dev/null
+++ b/tests/mappers/test_volume_mapper.py
@@ -0,0 +1,34 @@
+import pytest
+import vtk
+
+import pyvista as pv
+
+
+@pytest.fixture()
+def volume_mapper():
+    vol = pv.UniformGrid(dimensions=(10, 10, 10))
+    vol['scalars'] = 255 - vol.z * 25
+    pl = pv.Plotter()
+    actor = pl.add_volume(vol)
+    return actor.mapper
+
+
+def test_volume_mapper_dataset(volume_mapper):
+    assert isinstance(volume_mapper.dataset, pv.UniformGrid)
+
+
+def test_volume_mapper_blend_mode(volume_mapper):
+    assert isinstance(volume_mapper.blend_mode, str)
+
+    volume_mapper.blend_mode = vtk.vtkVolumeMapper.COMPOSITE_BLEND
+    assert volume_mapper.blend_mode == 'composite'
+
+    for mode in ['average', 'minimum', 'maximum', 'composite', 'additive']:
+        volume_mapper.blend_mode = mode
+        assert volume_mapper.blend_mode == mode
+
+    with pytest.raises(ValueError, match='Please choose either "additive"'):
+        volume_mapper.blend_mode = 'not a mode'
+
+    with pytest.raises(TypeError, match='int or str'):
+        volume_mapper.blend_mode = 0.5
diff --git a/tests/test_actor.py b/tests/test_actor.py
--- a/tests/test_actor.py
+++ b/tests/test_actor.py
@@ -2,6 +2,7 @@
 
 import numpy as np
 import pytest
+import vtk
 
 import pyvista as pv
 from pyvista import examples
@@ -16,6 +17,14 @@ def actor():
     return pv.Plotter().add_mesh(pv.Plane())
 
 
+@pytest.fixture()
+def vol_actor():
+    vol = pv.UniformGrid(dimensions=(10, 10, 10))
+    vol['scalars'] = 255 - vol.z * 25
+    pl = pv.Plotter()
+    return pl.add_volume(vol)
+
+
 def test_actor_init_empty():
     actor = pv.Actor()
     assert 'Position' in repr(actor)
@@ -143,3 +152,11 @@ def test_actor_backface_prop(actor):
 
     actor.backface_prop = None
     assert actor.backface_prop.opacity == actor.prop.opacity
+
+
+def test_vol_actor_prop(vol_actor):
+    assert isinstance(vol_actor.prop, vtk.vtkVolumeProperty)
+
+    prop = vtk.vtkVolumeProperty()
+    vol_actor.prop = prop
+    assert vol_actor.prop is prop
diff --git a/tests/test_volume_property.py b/tests/test_volume_property.py
new file mode 100644
--- /dev/null
+++ b/tests/test_volume_property.py
@@ -0,0 +1,75 @@
+import pytest
+
+import pyvista as pv
+from pyvista.plotting.volume_property import VolumeProperty
+
+
+@pytest.fixture()
+def vol_prop():
+    return VolumeProperty()
+
+
+def test_volume_lookup_table(vol_prop):
+    lut = pv.LookupTable(cmap='bwr')
+    lut.apply_opacity([1.0, 0.0, 0.0, 0.3, 0.0, 0.0, 0.0, 0.3])
+    orig = vol_prop.GetRGBTransferFunction()
+    vol_prop.apply_lookup_table(lut)
+    assert vol_prop.GetRGBTransferFunction() is not orig
+
+
+def test_interpolation_type(vol_prop):
+    assert isinstance(vol_prop.interpolation_type, str)
+
+    for interpolation_type in ['nearest', 'linear']:
+        vol_prop.interpolation_type = interpolation_type
+        assert vol_prop.interpolation_type == interpolation_type
+
+    with pytest.raises(ValueError, match='must be either'):
+        vol_prop.interpolation_type = 'not valid'
+
+
+def test_volume_property_shade(vol_prop):
+    assert isinstance(vol_prop.shade, bool)
+    vol_prop.shade = True
+    assert vol_prop.shade is True
+    vol_prop.shade = False
+    assert vol_prop.shade is False
+
+
+def test_volume_property_ambient(vol_prop):
+    assert isinstance(vol_prop.ambient, float)
+    value = 0.45
+    vol_prop.ambient = value
+    assert vol_prop.ambient == value
+
+
+def test_volume_property_diffuse(vol_prop):
+    assert isinstance(vol_prop.diffuse, float)
+    value = 0.45
+    vol_prop.diffuse = value
+    assert vol_prop.diffuse == value
+
+
+def test_volume_property_specular(vol_prop):
+    assert isinstance(vol_prop.specular, float)
+    value = 0.45
+    vol_prop.specular = value
+    assert vol_prop.specular == value
+
+
+def test_volume_property_specular_power(vol_prop):
+    assert isinstance(vol_prop.specular_power, float)
+    value = 0.45
+    vol_prop.specular_power = value
+    assert vol_prop.specular_power == value
+
+
+def test_volume_property_copy(vol_prop):
+    vol_prop.ambient = 1.0
+    vol_prop_copy = vol_prop.copy()
+    assert vol_prop_copy.ambient == vol_prop.ambient
+
+
+def test_volume_property_repr(vol_prop):
+    assert 'Interpolation type:' in repr(vol_prop)
+    assert "nearest" in repr(vol_prop)
