diff --git a/src/sqlfluff/core/templaters/slicers/tracer.py b/src/sqlfluff/core/templaters/slicers/tracer.py
--- a/src/sqlfluff/core/templaters/slicers/tracer.py
+++ b/src/sqlfluff/core/templaters/slicers/tracer.py
@@ -185,6 +185,23 @@ def next_slice_id(self) -> str:
         self.slice_id += 1
         return result
 
+    def slice_info_for_literal(self, length, prefix="") -> RawSliceInfo:
+        """Returns a RawSliceInfo for a literal.
+
+        In the alternate template, literals are replaced with a uniquely
+        numbered, easily-to-parse literal. JinjaTracer uses this output as
+        a "breadcrumb trail" to deduce the execution path through the template.
+
+        This is important even if the original literal (i.e. in the raw SQL
+        file) was empty, as is the case when Jinja whitespace control is used
+        (e.g. "{%- endif -%}"), because fewer breadcrumbs means JinjaTracer has
+        to *guess* the path, in which case it assumes simple, straight-line
+        execution, which can easily be wrong with loops and conditionals.
+        """
+        unique_alternate_id = self.next_slice_id()
+        alternate_code = f"\0{prefix}{unique_alternate_id}_{length}"
+        return RawSliceInfo(unique_alternate_id, alternate_code, [])
+
     def _slice_template(self) -> List[RawFileSlice]:
         """Slice template in jinja.
 
@@ -217,12 +234,6 @@ def _slice_template(self) -> List[RawFileSlice]:
         for _, elem_type, raw in self.env.lex(self.raw_str):
             # Replace literal text with a unique ID.
             if elem_type == "data":
-                if set_idx is None:
-                    unique_alternate_id = self.next_slice_id()
-                    alternate_code = f"\0{unique_alternate_id}_{len(raw)}"
-                else:
-                    unique_alternate_id = self.next_slice_id()
-                    alternate_code = f"\0set{unique_alternate_id}_{len(raw)}"
                 result.append(
                     RawFileSlice(
                         raw,
@@ -230,8 +241,8 @@ def _slice_template(self) -> List[RawFileSlice]:
                         idx,
                     )
                 )
-                self.raw_slice_info[result[-1]] = RawSliceInfo(
-                    unique_alternate_id, alternate_code, []
+                self.raw_slice_info[result[-1]] = self.slice_info_for_literal(
+                    len(raw), "" if set_idx is None else "set"
                 )
                 idx += len(raw)
                 continue
@@ -274,7 +285,7 @@ def _slice_template(self) -> List[RawFileSlice]:
                         )
                     # Treat the skipped whitespace as a literal.
                     result.append(RawFileSlice(skipped_str, "literal", idx))
-                    self.raw_slice_info[result[-1]] = RawSliceInfo("", "", [])
+                    self.raw_slice_info[result[-1]] = self.slice_info_for_literal(0)
                     idx += num_chars_skipped
 
             # raw_end and raw_begin behave a little differently in
@@ -354,10 +365,6 @@ def _slice_template(self) -> List[RawFileSlice]:
                     # returns, it has simply grouped them differently than we
                     # want.
                     trailing_chars = len(m.group(0))
-                    if block_type.startswith("block_"):
-                        alternate_code = self._remove_block_whitespace_control(
-                            str_buff[:-trailing_chars]
-                        )
                     result.append(
                         RawFileSlice(
                             str_buff[:-trailing_chars],
@@ -378,11 +385,9 @@ def _slice_template(self) -> List[RawFileSlice]:
                             idx,
                         )
                     )
-                    self.raw_slice_info[result[-1]] = RawSliceInfo("", "", [])
+                    self.raw_slice_info[result[-1]] = self.slice_info_for_literal(0)
                     idx += trailing_chars
                 else:
-                    if block_type.startswith("block_"):
-                        alternate_code = self._remove_block_whitespace_control(str_buff)
                     result.append(
                         RawFileSlice(
                             str_buff,
@@ -424,17 +429,3 @@ def _slice_template(self) -> List[RawFileSlice]:
                     stack.pop()
                 str_buff = ""
         return result
-
-    @classmethod
-    def _remove_block_whitespace_control(cls, in_str: str) -> Optional[str]:
-        """Removes whitespace control from a Jinja block start or end.
-
-        Use of Jinja whitespace stripping (e.g. `{%-` or `-%}`) causes the
-        template to produce less output. This makes JinjaTracer's job harder,
-        because it uses the "bread crumb trail" of output to deduce the
-        execution path through the template. This change has no impact on the
-        actual Jinja output, which uses the original, unmodified code.
-        """
-        result = regex.sub(r"^{%-", "{%", in_str)
-        result = regex.sub(r"-%}$", "%}", result)
-        return result if result != in_str else None
