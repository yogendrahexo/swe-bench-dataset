diff --git a/test/core/templaters/base_test.py b/test/core/templaters/base_test.py
--- a/test/core/templaters/base_test.py
+++ b/test/core/templaters/base_test.py
@@ -134,6 +134,7 @@ def test__templated_file_get_line_pos_of_char_pos(
         templated_str=templated_str,
         sliced_file=file_slices,
         fname="test",
+        check_consistency=False,
     )
     res_line_no, res_line_pos = file.get_line_pos_of_char_pos(in_charpos)
     assert res_line_no == out_line_no
@@ -287,6 +288,7 @@ def test__templated_file_templated_slice_to_source_slice(
             for rs in raw_slices
         ],
         fname="test",
+        check_consistency=False,
     )
     source_slice = file.templated_slice_to_source_slice(in_slice)
     literal_test = file.is_source_slice_literal(source_slice)
@@ -303,5 +305,6 @@ def test__templated_file_source_only_slices():
             RawFileSlice("b" * 7, "comment", 10),
             RawFileSlice("a" * 10, "literal", 17),
         ],
+        check_consistency=False,
     )
     assert file.source_only_slices() == [RawFileSlice("b" * 7, "comment", 10)]
diff --git a/test/core/templaters/jinja_test.py b/test/core/templaters/jinja_test.py
--- a/test/core/templaters/jinja_test.py
+++ b/test/core/templaters/jinja_test.py
@@ -370,6 +370,35 @@ def test__templater_jinja_slices(case: RawTemplatedTestCase):
     assert actual_rs_source_list == case.expected_raw_sliced__source_list
 
 
+def test_templater_set_block_handling():
+    """Test handling of literals in {% set %} blocks.
+
+    Specifically, verify they are not modified in the alternate template.
+    """
+
+    def run_query(sql):
+        # Prior to the bug fix, this assertion failed. This was bad because,
+        # inside JinjaTracer, dbt templates similar to the one in this test
+        # would call the database with funky SQL (including weird strings it
+        # uses internally like: 00000000000000000000000000000002.
+        assert sql == "\n\nselect 1 from foobarfoobarfoobarfoobar_dev\n\n"
+        return sql
+
+    t = JinjaTemplater(override_context=dict(run_query=run_query))
+    instr = """{% set my_query1 %}
+select 1 from foobarfoobarfoobarfoobar_{{ "dev" }}
+{% endset %}
+{% set my_query2 %}
+{{ my_query1 }}
+{% endset %}
+
+{{ run_query(my_query2) }}
+"""
+    outstr, vs = t.process(in_str=instr, fname="test", config=FluffConfig())
+    assert str(outstr) == "\n\n\n\n\nselect 1 from foobarfoobarfoobarfoobar_dev\n\n\n"
+    assert len(vs) == 0
+
+
 def test__templater_jinja_error_variable():
     """Test missing variable error handling in the jinja templater."""
     t = JinjaTemplater(override_context=dict(blah="foo"))
@@ -846,6 +875,45 @@ def test__templater_jinja_slice_template(test, result):
                 ("literal", slice(312, 327, None), slice(27, 42, None)),
             ],
         ),
+        (
+            # Test for issue 2835. There's no space between "col" and "="
+            """{% set col= "col1" %}
+SELECT {{ col }}
+""",
+            None,
+            [
+                ("block_start", slice(0, 21, None), slice(0, 0, None)),
+                ("literal", slice(21, 29, None), slice(0, 8, None)),
+                ("templated", slice(29, 38, None), slice(8, 12, None)),
+                ("literal", slice(38, 39, None), slice(12, 13, None)),
+            ],
+        ),
+        (
+            # Another test for issue 2835. The {% for %} loop inside the
+            # {% set %} caused JinjaTracer to think the {% set %} ended
+            # at the {% endfor %}
+            """{% set some_part_of_the_query %}
+    {% for col in ["col1"] %}
+    {{col}}
+    {% endfor %}
+{% endset %}
+
+SELECT {{some_part_of_the_query}}
+FROM SOME_TABLE
+""",
+            None,
+            [
+                ("block_start", slice(0, 32, None), slice(0, 0, None)),
+                ("literal", slice(32, 37, None), slice(0, 0, None)),
+                ("block_start", slice(37, 62, None), slice(0, 0, None)),
+                ("block_end", slice(79, 91, None), slice(0, 0, None)),
+                ("literal", slice(91, 92, None), slice(0, 0, None)),
+                ("block_end", slice(92, 104, None), slice(0, 0, None)),
+                ("literal", slice(104, 113, None), slice(0, 9, None)),
+                ("templated", slice(113, 139, None), slice(9, 29, None)),
+                ("literal", slice(139, 156, None), slice(29, 46, None)),
+            ],
+        ),
     ],
 )
 def test__templater_jinja_slice_file(raw_file, override_context, result, caplog):
