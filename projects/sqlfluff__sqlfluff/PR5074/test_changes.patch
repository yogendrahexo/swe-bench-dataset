diff --git a/test/cli/commands_test.py b/test/cli/commands_test.py
--- a/test/cli/commands_test.py
+++ b/test/cli/commands_test.py
@@ -379,6 +379,20 @@ def test__cli__command_render_stdin():
                 "test/fixtures/linter/operator_errors.sql",
             ],
         ),
+        # Check ignoring linting (multiprocess)
+        # https://github.com/sqlfluff/sqlfluff/issues/5066
+        (
+            lint,
+            [
+                "-n",
+                "--ignore",
+                "linting",
+                "-p",
+                "2",
+                "test/fixtures/linter/operator_errors.sql",
+                "test/fixtures/linter/comma_errors.sql",
+            ],
+        ),
         # Check linting works in specifying multiple rules
         (
             lint,
diff --git a/test/core/errors_test.py b/test/core/errors_test.py
new file mode 100644
--- /dev/null
+++ b/test/core/errors_test.py
@@ -0,0 +1,75 @@
+"""Tests pickling and unpickling of errors."""
+
+import pickle
+import pytest
+import copy
+
+from sqlfluff.core.parser import PositionMarker, RawSegment
+from sqlfluff.core.rules import BaseRule
+from sqlfluff.core.templaters import TemplatedFile
+
+from sqlfluff.core.errors import SQLBaseError, SQLLintError, SQLParseError, SQLLexError
+
+
+class Rule_T078(BaseRule):
+    """A dummy rule."""
+
+    groups = ("all",)
+
+    def _eval(self, context):
+        pass
+
+
+def assert_pickle_robust(err: SQLBaseError):
+    """Test that the class remains the same through copying and pickling."""
+    # First try copying (and make sure they still compare equal)
+    err_copy = copy.copy(err)
+    assert err_copy == err
+    # Then try picking (and make sure they also still compare equal)
+    pickled = pickle.dumps(err)
+    pickle_copy = pickle.loads(pickled)
+    assert pickle_copy == err
+
+
+@pytest.mark.parametrize(
+    "ignore",
+    [True, False],
+)
+def test__lex_error_pickle(ignore):
+    """Test lexing error pickling."""
+    template = TemplatedFile.from_string("foobar")
+    err = SQLLexError("Foo", pos=PositionMarker(slice(0, 6), slice(0, 6), template))
+    # Set ignore to true if configured.
+    # NOTE: This not copying was one of the reasons for this test.
+    err.ignore = ignore
+    assert_pickle_robust(err)
+
+
+@pytest.mark.parametrize(
+    "ignore",
+    [True, False],
+)
+def test__parse_error_pickle(ignore):
+    """Test parse error pickling."""
+    template = TemplatedFile.from_string("foobar")
+    segment = RawSegment("foobar", PositionMarker(slice(0, 6), slice(0, 6), template))
+    err = SQLParseError("Foo", segment=segment)
+    # Set ignore to true if configured.
+    # NOTE: This not copying was one of the reasons for this test.
+    err.ignore = ignore
+    assert_pickle_robust(err)
+
+
+@pytest.mark.parametrize(
+    "ignore",
+    [True, False],
+)
+def test__lint_error_pickle(ignore):
+    """Test lint error pickling."""
+    template = TemplatedFile.from_string("foobar")
+    segment = RawSegment("foobar", PositionMarker(slice(0, 6), slice(0, 6), template))
+    err = SQLLintError("Foo", segment=segment, rule=Rule_T078)
+    # Set ignore to true if configured.
+    # NOTE: This not copying was one of the reasons for this test.
+    err.ignore = ignore
+    assert_pickle_robust(err)
