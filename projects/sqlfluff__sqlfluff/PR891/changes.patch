diff --git a/src/sqlfluff/core/errors.py b/src/sqlfluff/core/errors.py
--- a/src/sqlfluff/core/errors.py
+++ b/src/sqlfluff/core/errors.py
@@ -82,9 +82,9 @@ def pos_marker(self):
         """Get the position marker of the violation.
 
         Returns:
-            The :obj:`PosMarker` of the segments if the violation has a segment,
-            the :obj:`PosMarker` directly stored in a `pos` attribute or None
-            if neither a present.
+            The :obj:`FilePositionMarker` of the segments if the violation has a segment,
+            the :obj:`FilePositionMarker` directly stored in a `pos` attribute or None
+            if neither is present.
 
         """
         if hasattr(self, "segment"):
diff --git a/src/sqlfluff/core/linter.py b/src/sqlfluff/core/linter.py
--- a/src/sqlfluff/core/linter.py
+++ b/src/sqlfluff/core/linter.py
@@ -53,6 +53,14 @@ class RuleTuple(NamedTuple):
     description: str
 
 
+class NoQaDirective(NamedTuple):
+    """Parsed version of a 'noqa' comment."""
+
+    line_no: int  # Source line number
+    rules: Optional[Tuple[str, ...]]  # Affected rule names
+    action: Optional[str]  # "enable", "disable", or "None"
+
+
 class ProtoFile(NamedTuple):
     """Proto object to be inherited by LintedFile."""
 
@@ -60,7 +68,7 @@ class ProtoFile(NamedTuple):
     violations: list
     time_dict: dict
     tree: Any
-    ignore_mask: list
+    ignore_mask: List[NoQaDirective]
 
 
 class ParsedString(NamedTuple):
@@ -95,10 +103,10 @@ class LintedFile(NamedTuple):
     """A class to store the idea of a linted file."""
 
     path: str
-    violations: list
+    violations: List[SQLBaseError]
     time_dict: dict
     tree: Optional[BaseSegment]
-    ignore_mask: list
+    ignore_mask: List[NoQaDirective]
     templated_file: TemplatedFile
 
     def check_tuples(self) -> List[CheckTuple]:
@@ -152,15 +160,90 @@ def get_violations(
             violations = [v for v in violations if not v.ignore]
             # Ignore any rules in the ignore mask
             if self.ignore_mask:
-                for line_no, rules in self.ignore_mask:
-                    violations = [
-                        v
-                        for v in violations
-                        if not (
-                            v.line_no() == line_no
-                            and (rules is None or v.rule_code() in rules)
-                        )
-                    ]
+                violations = self._ignore_masked_violations(violations)
+        return violations
+
+    @staticmethod
+    def _ignore_masked_violations_single_line(
+        violations: List[SQLBaseError], ignore_mask: List[NoQaDirective]
+    ):
+        """Returns whether to ignore error for line-specific directives.
+
+        The "ignore" list is assumed to ONLY contain NoQaDirectives with
+        action=None.
+        """
+        for ignore in ignore_mask:
+            violations = [
+                v
+                for v in violations
+                if not (
+                    v.line_no() == ignore.line_no
+                    and (ignore.rules is None or v.rule_code() in ignore.rules)
+                )
+            ]
+        return violations
+
+    @staticmethod
+    def _should_ignore_violation_line_range(
+        line_no: int, ignore_rule: List[NoQaDirective]
+    ):
+        """Returns whether to ignore a violation at line_no."""
+        # Loop through the NoQaDirectives to find the state of things at
+        # line_no. Assumptions about "ignore_rule":
+        # - Contains directives for only ONE RULE, i.e. the rule that was
+        #   violated at line_no
+        # - Sorted in ascending order by line number
+        disable = False
+        for ignore in ignore_rule:
+            if ignore.line_no > line_no:
+                break
+            disable = ignore.action == "disable"
+        return disable
+
+    @classmethod
+    def _ignore_masked_violations_line_range(
+        cls, violations: List[SQLBaseError], ignore_mask: List[NoQaDirective]
+    ):
+        """Returns whether to ignore error for line-range directives.
+
+        The "ignore" list is assumed to ONLY contain NoQaDirectives where
+        action is "enable" or "disable".
+        """
+        result = []
+        for v in violations:
+            # Find the directives that affect the violated rule "v", either
+            # because they specifically reference it or because they don't
+            # specify a list of rules, thus affecting ALL rules.
+            ignore_rule = sorted(
+                [
+                    ignore
+                    for ignore in ignore_mask
+                    if not ignore.rules
+                    or (v.rule_code() in cast(Tuple[str, ...], ignore.rules))
+                ],
+                key=lambda ignore: ignore.line_no,
+            )
+            # Determine whether to ignore the violation, based on the relevant
+            # enable/disable directives.
+            if not cls._should_ignore_violation_line_range(v.line_no(), ignore_rule):
+                result.append(v)
+        return result
+
+    def _ignore_masked_violations(
+        self, violations: List[SQLBaseError]
+    ) -> List[SQLBaseError]:
+        """Remove any violations specified by ignore_mask.
+
+        This involves two steps:
+        1. Filter out violations affected by single-line "noqa" directives.
+        2. Filter out violations affected by disable/enable "noqa" directives.
+        """
+        ignore_specific = [ignore for ignore in self.ignore_mask if not ignore.action]
+        ignore_range = [ignore for ignore in self.ignore_mask if ignore.action]
+        violations = self._ignore_masked_violations_single_line(
+            violations, ignore_specific
+        )
+        violations = self._ignore_masked_violations_line_range(violations, ignore_range)
         return violations
 
     def num_violations(self, **kwargs) -> int:
@@ -907,27 +990,53 @@ def parse_string(
         bencher("Finish parsing {0!r}".format(short_fname))
         return ParsedString(parsed, violations, time_dict, templated_file, config)
 
-    @staticmethod
-    def extract_ignore_from_comment(comment: RawSegment):
-        """Extract ignore mask entries from a comment segment."""
+    @classmethod
+    def parse_noqa(cls, comment: str, line_no: int):
+        """Extract ignore mask entries from a comment string."""
         # Also trim any whitespace afterward
-        comment_content = comment.raw_trimmed().strip()
-        if comment_content.startswith("noqa"):
+        if comment.startswith("noqa"):
             # This is an ignore identifier
-            comment_remainder = comment_content[4:]
+            comment_remainder = comment[4:]
             if comment_remainder:
                 if not comment_remainder.startswith(":"):
                     return SQLParseError(
                         "Malformed 'noqa' section. Expected 'noqa: <rule>[,...]",
-                        segment=comment,
                     )
-                comment_remainder = comment_remainder[1:]
-                rules = [r.strip() for r in comment_remainder.split(",")]
-                return (comment.pos_marker.line_no, tuple(rules))
-            else:
-                return (comment.pos_marker.line_no, None)
+                comment_remainder = comment_remainder[1:].strip()
+                if comment_remainder:
+                    action: Optional[str]
+                    if "=" in comment_remainder:
+                        action, rule_part = comment_remainder.split("=", 1)
+                        if action not in {"disable", "enable"}:
+                            return SQLParseError(
+                                "Malformed 'noqa' section. Expected 'noqa: enable=<rule>[,...] | all' or 'noqa: disable=<rule>[,...] | all",
+                            )
+                    else:
+                        action = None
+                        rule_part = comment_remainder
+                        if rule_part in {"disable", "enable"}:
+                            return SQLParseError(
+                                "Malformed 'noqa' section. Expected 'noqa: enable=<rule>[,...] | all' or 'noqa: disable=<rule>[,...] | all",
+                            )
+                    rules: Optional[Tuple[str, ...]]
+                    if rule_part != "all":
+                        rules = tuple(r.strip() for r in rule_part.split(","))
+                    else:
+                        rules = None
+                    return NoQaDirective(line_no, rules, action)
+            return NoQaDirective(line_no, None, None)
         return None
 
+    @classmethod
+    def extract_ignore_from_comment(cls, comment: RawSegment):
+        """Extract ignore mask entries from a comment segment."""
+        # Also trim any whitespace afterward
+        comment_content = comment.raw_trimmed().strip()
+        result = cls.parse_noqa(comment_content, comment.pos_marker.line_no)
+        if isinstance(result, SQLParseError):
+            result.segment = comment
+        return result
+
     @staticmethod
     def _warn_unfixable(code: str):
         linter_logger.warning(
