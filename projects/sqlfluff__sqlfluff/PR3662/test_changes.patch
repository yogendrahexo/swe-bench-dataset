diff --git a/test/core/linter_test.py b/test/core/linter_test.py
--- a/test/core/linter_test.py
+++ b/test/core/linter_test.py
@@ -14,6 +14,7 @@
 from sqlfluff.cli.formatters import OutputStreamFormatter
 from sqlfluff.cli.outputstream import make_output_stream
 from sqlfluff.core.linter import LintingResult, NoQaDirective
+from sqlfluff.core.linter.runner import get_runner
 import sqlfluff.core.linter as linter
 from sqlfluff.core.parser import GreedyUntil, Ref
 from sqlfluff.core.templaters import TemplatedFile
@@ -289,6 +290,36 @@ def test_lint_path_parallel_wrapper_exception(patched_lint):
             result.reraise()
 
 
+@pytest.mark.parametrize(
+    "mock_cpu,in_processes,exp_processes",
+    [
+        # Make the mocked cpu count a really high value which is
+        # unlikely to collide with the real value. We can then
+        # test all the different combos.
+        (512, 1, 1),
+        (512, 0, 512),
+        (512, -12, 500),
+        (512, 5, 5),
+        # Check that we can't go lower than 1 in a 1 cpu case
+        (1, -1, 1),
+    ],
+)
+@patch("multiprocessing.cpu_count")
+def test__linter__get_runner_processes(
+    patched_cpu_count, mock_cpu, in_processes, exp_processes
+):
+    """Test that get_runner handles processes correctly."""
+    # Make the mocked cpu count a really high value which is
+    # unlikely to collide with the real value.
+    patched_cpu_count.return_value = mock_cpu
+    _, return_processes = get_runner(
+        linter=Linter(),
+        config=FluffConfig(overrides={"dialect": "ansi"}),
+        processes=in_processes,
+    )
+    assert return_processes == exp_processes
+
+
 @patch("sqlfluff.core.linter.runner.linter_logger")
 @patch("sqlfluff.core.linter.Linter.lint_rendered")
 def test__linter__linting_unexpected_error_handled_gracefully(
