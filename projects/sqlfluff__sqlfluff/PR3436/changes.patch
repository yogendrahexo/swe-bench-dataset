diff --git a/src/sqlfluff/core/templaters/slicers/tracer.py b/src/sqlfluff/core/templaters/slicers/tracer.py
--- a/src/sqlfluff/core/templaters/slicers/tracer.py
+++ b/src/sqlfluff/core/templaters/slicers/tracer.py
@@ -40,6 +40,7 @@ class RawSliceInfo:
     unique_alternate_id: Optional[str]
     alternate_code: Optional[str]
     next_slice_indices: List[int] = field(default_factory=list)
+    inside_block: bool = field(default=False)  # {% block %}
 
 
 class JinjaTracer:
@@ -101,13 +102,21 @@ def trace(self, append_to_templated: str = "") -> JinjaTrace:
             alt_id, content_info, literal = value
             target_slice_idx = self.find_slice_index(alt_id)
             slice_length = content_info if literal else len(str(content_info))
-            self.move_to_slice(target_slice_idx, slice_length)
+            target_inside_block = self.raw_slice_info[
+                self.raw_sliced[target_slice_idx]
+            ].inside_block
+            if not target_inside_block:
+                # Normal case: Walk through the template.
+                self.move_to_slice(target_slice_idx, slice_length)
+            else:
+                # {% block %} executes code elsewhere in the template but does
+                # not move there. It's a bit like macro invocation.
+                self.record_trace(slice_length, target_slice_idx)
 
         # TRICKY: The 'append_to_templated' parameter is only used by the dbt
         # templater, passing "\n" for this parameter if we need to add one back.
         # (The Jinja templater does not pass this parameter, so
         # 'append_to_templated' gets the default value of "", empty string.)
-        # we receive the default value of "".) The dbt templater will
         # For more detail, see the comments near the call to slice_file() in
         # plugins/sqlfluff-templater-dbt/sqlfluff_templater_dbt/templater.py.
         templated_str = self.make_template(self.raw_str).render() + append_to_templated
@@ -197,7 +206,8 @@ def __init__(self, raw_str: str, env: Environment):
 
         # Internal bookkeeping
         self.slice_id: int = 0
-        self.inside_set_or_macro: bool = False
+        self.inside_set_or_macro: bool = False  # {% set %} or {% macro %}
+        self.inside_block = False  # {% block %}
         self.stack: List[int] = []
         self.idx_raw: int = 0
 
@@ -211,7 +221,7 @@ def slice_info_for_literal(self, length, prefix="") -> RawSliceInfo:
         """Returns a RawSliceInfo for a literal.
 
         In the alternate template, literals are replaced with a uniquely
-        numbered, easily-to-parse literal. JinjaTracer uses this output as
+        numbered, easy-to-parse literal. JinjaTracer uses this output as
         a "breadcrumb trail" to deduce the execution path through the template.
 
         This is important even if the original literal (i.e. in the raw SQL
@@ -222,13 +232,16 @@ def slice_info_for_literal(self, length, prefix="") -> RawSliceInfo:
         """
         unique_alternate_id = self.next_slice_id()
         alternate_code = f"\0{prefix}{unique_alternate_id}_{length}"
-        return self.make_raw_slice_info(unique_alternate_id, alternate_code)
+        return self.make_raw_slice_info(
+            unique_alternate_id, alternate_code, inside_block=self.inside_block
+        )
 
-    def update_inside_set_or_macro(
+    def update_inside_set_or_macro_or_block(
         self, block_type: str, trimmed_parts: List[str]
     ) -> None:
         """Based on block tag, update whether we're in a set/macro section."""
         if block_type == "block_start" and trimmed_parts[0] in (
+            "block",
             "macro",
             "set",
         ):
@@ -236,11 +249,12 @@ def update_inside_set_or_macro(
             # - {% set variable = value %}
             # - {% set variable %}value{% endset %}
             # https://jinja.palletsprojects.com/en/2.10.x/templates/#block-assignments
-            # When the second format is used, set the field
-            # 'inside_set_or_macro' to True. This info is used elsewhere,
-            # as other code inside these regions require special handling.
-            # (Generally speaking, JinjaTracer ignores the contents of these
-            # blocks, treating them like opaque templated regions.)
+            # When the second format is used, set one of the fields
+            # 'inside_set_or_macro' or 'inside_block' to True. This info is
+            # used elsewhere, as other code inside these regions require
+            # special handling. (Generally speaking, JinjaAnalyzer ignores
+            # the contents of these blocks, treating them like opaque templated
+            # regions.)
             try:
                 # Entering a set/macro block. Build a source string consisting
                 # of just this one Jinja command and see if it parses. If so,
@@ -255,22 +269,33 @@ def update_inside_set_or_macro(
                     isinstance(e.message, str)
                     and "Unexpected end of template" in e.message
                 ):
-                    # It was opening a block, thus we're inside a set or macro.
-                    self.inside_set_or_macro = True
+                    # It was opening a block, thus we're inside a set, macro, or
+                    # block.
+                    if trimmed_parts[0] == "block":
+                        self.inside_block = True
+                    else:
+                        self.inside_set_or_macro = True
                 else:
                     raise  # pragma: no cover
-        elif block_type == "block_end" and (trimmed_parts[0] in ("endmacro", "endset")):
-            # Exiting a set/macro block.
-            self.inside_set_or_macro = False
+        elif block_type == "block_end":
+            if trimmed_parts[0] in ("endmacro", "endset"):
+                # Exiting a set or macro.
+                self.inside_set_or_macro = False
+            elif trimmed_parts[0] == "endblock":
+                # Exiting a {% block %} block.
+                self.inside_block = False
 
     def make_raw_slice_info(
-        self, unique_alternate_id: Optional[str], alternate_code: Optional[str]
+        self,
+        unique_alternate_id: Optional[str],
+        alternate_code: Optional[str],
+        inside_block: bool = False,
     ) -> RawSliceInfo:
         """Create RawSliceInfo as given, or "empty" if in set/macro block."""
         if not self.inside_set_or_macro:
-            return RawSliceInfo(unique_alternate_id, alternate_code, [])
+            return RawSliceInfo(unique_alternate_id, alternate_code, [], inside_block)
         else:
-            return RawSliceInfo(None, None, [])
+            return RawSliceInfo(None, None, [], False)
 
     # We decide the "kind" of element we're dealing with using its _closing_
     # tag rather than its opening tag. The types here map back to similar types
@@ -351,7 +376,7 @@ def analyze(self, make_template: Callable[[str], Template]) -> JinjaTracer:
                         raw_slice_info = self.track_templated(
                             m_open, m_close, tag_contents
                         )
-                self.update_inside_set_or_macro(block_type, tag_contents)
+                self.update_inside_set_or_macro_or_block(block_type, tag_contents)
                 m_strip_right = regex.search(
                     r"\s+$", raw, regex.MULTILINE | regex.DOTALL
                 )
