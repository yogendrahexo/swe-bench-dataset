diff --git a/src/sqlfluff/cli/commands.py b/src/sqlfluff/cli/commands.py
--- a/src/sqlfluff/cli/commands.py
+++ b/src/sqlfluff/cli/commands.py
@@ -6,13 +6,7 @@
 import logging
 import time
 from logging import LogRecord
-from typing import (
-    Callable,
-    Tuple,
-    NoReturn,
-    Optional,
-    List,
-)
+from typing import Callable, Tuple, NoReturn, Optional, List, cast
 
 import yaml
 
@@ -418,6 +412,17 @@ def dialects(**kwargs) -> None:
     click.echo(format_dialects(dialect_readout), color=c.get("color"))
 
 
+def dump_file_payload(filename: Optional[str], payload: str):
+    """Write the output file content to stdout or file."""
+    # If there's a file specified to write to, write to it.
+    if filename:
+        with open(filename, "w") as out_file:
+            out_file.write(payload)
+    # Otherwise write to stdout
+    else:
+        click.echo(payload)
+
+
 @cli.command()
 @common_options
 @core_options
@@ -429,6 +434,14 @@ def dialects(**kwargs) -> None:
     type=click.Choice([ft.value for ft in FormatType], case_sensitive=False),
     help="What format to return the lint result in (default=human).",
 )
+@click.option(
+    "--write-output",
+    help=(
+        "Optionally provide a filename to write the results to, mostly used in "
+        "tandem with --format. NB: Setting an output file re-enables normal "
+        "stdout logging."
+    ),
+)
 @click.option(
     "--annotation-level",
     default="notice",
@@ -468,6 +481,7 @@ def lint(
     paths: Tuple[str],
     processes: int,
     format: str,
+    write_output: Optional[str],
     annotation_level: str,
     nofail: bool,
     disregard_sqlfluffignores: bool,
@@ -497,7 +511,8 @@ def lint(
 
     """
     config = get_config(extra_config_path, ignore_local_config, **kwargs)
-    non_human_output = format != FormatType.human.value
+    non_human_output = (format != FormatType.human.value) or (write_output is not None)
+    file_output = None
     lnt, formatter = get_linter_and_formatter(config, silent=non_human_output)
 
     verbose = config.get("verbose")
@@ -535,9 +550,9 @@ def lint(
             click.echo(format_linting_stats(result, verbose=verbose))
 
     if format == FormatType.json.value:
-        click.echo(json.dumps(result.as_records()))
+        file_output = json.dumps(result.as_records())
     elif format == FormatType.yaml.value:
-        click.echo(yaml.dump(result.as_records(), sort_keys=False))
+        file_output = yaml.dump(result.as_records(), sort_keys=False)
     elif format == FormatType.github_annotation.value:
         github_result = []
         for record in result.as_records():
@@ -558,7 +573,10 @@ def lint(
                         "annotation_level": annotation_level,
                     }
                 )
-        click.echo(json.dumps(github_result))
+        file_output = json.dumps(github_result)
+
+    if file_output:
+        dump_file_payload(write_output, cast(str, file_output))
 
     if bench:
         click.echo("==== overall timings ====")
@@ -876,6 +894,14 @@ def quoted_presenter(dumper, data):
     ),
     help="What format to return the parse result in.",
 )
+@click.option(
+    "--write-output",
+    help=(
+        "Optionally provide a filename to write the results to, mostly used in "
+        "tandem with --format. NB: Setting an output file re-enables normal "
+        "stdout logging."
+    ),
+)
 @click.option(
     "--profiler", is_flag=True, help="Set this flag to engage the python profiler."
 )
@@ -892,6 +918,7 @@ def parse(
     code_only: bool,
     include_meta: bool,
     format: str,
+    write_output: Optional[str],
     profiler: bool,
     bench: bool,
     nofail: bool,
@@ -909,7 +936,8 @@ def parse(
     """
     c = get_config(extra_config_path, ignore_local_config, **kwargs)
     # We don't want anything else to be logged if we want json or yaml output
-    non_human_output = format in (FormatType.json.value, FormatType.yaml.value)
+    # unless we're writing to a file.
+    non_human_output = (format != FormatType.human.value) or (write_output is not None)
     lnt, formatter = get_linter_and_formatter(c, silent=non_human_output)
     verbose = c.get("verbose")
     recurse = c.get("recurse")
@@ -975,9 +1003,12 @@ def parse(
                 # For yaml dumping always dump double quoted strings if they contain
                 # tabs or newlines.
                 yaml.add_representer(str, quoted_presenter)
-                click.echo(yaml.dump(parsed_strings_dict, sort_keys=False))
+                file_output = yaml.dump(parsed_strings_dict, sort_keys=False)
             elif format == FormatType.json.value:
-                click.echo(json.dumps(parsed_strings_dict))
+                file_output = json.dumps(parsed_strings_dict)
+
+            # Dump the output to stdout or to file as appropriate.
+            dump_file_payload(write_output, file_output)
 
     except OSError:  # pragma: no cover
         click.echo(
