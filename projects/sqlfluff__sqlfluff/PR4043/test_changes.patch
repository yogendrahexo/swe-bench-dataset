diff --git a/test/cli/commands_test.py b/test/cli/commands_test.py
--- a/test/cli/commands_test.py
+++ b/test/cli/commands_test.py
@@ -31,6 +31,7 @@
     parse,
     dialects,
     get_config,
+    render,
 )
 from sqlfluff.core.rules import BaseRule, LintFix, LintResult
 from sqlfluff.core.parser.segments.raw import CommentSegment
@@ -250,6 +251,15 @@ def test__cli__command_lint_stdin(command):
     invoke_assert_code(args=[lint, ("--dialect=ansi",) + command], cli_input=sql)
 
 
+def test__cli__command_render_stdin():
+    """Check render on a simple script using stdin."""
+    with open("test/fixtures/cli/passing_a.sql") as test_file:
+        sql = test_file.read()
+    result = invoke_assert_code(args=[render, ("--dialect=ansi", "-")], cli_input=sql)
+    # Check we get back out the same file we input.
+    assert result.output.startswith(sql)
+
+
 @pytest.mark.parametrize(
     "command",
     [
@@ -263,6 +273,13 @@ def test__cli__command_lint_stdin(command):
                 "L051",
             ],
         ),
+        # Basic render
+        (
+            render,
+            [
+                "test/fixtures/cli/passing_b.sql",
+            ],
+        ),
         # Original tests from test__cli__command_lint
         (lint, ["-n", "test/fixtures/cli/passing_a.sql"]),
         (lint, ["-n", "-v", "test/fixtures/cli/passing_a.sql"]),
@@ -474,8 +491,15 @@ def test__cli__command_lint_parse(command):
         (
             (
                 lint,
-                ["test/fixtures/cli/unknown_jinja_tag/test.sql", "-vvvvvvv"],
-                "y",
+                ["test/fixtures/cli/unknown_jinja_tag/test.sql"],
+            ),
+            1,
+        ),
+        # Test render fail
+        (
+            (
+                render,
+                ["test/fixtures/cli/fail_many.sql"],
             ),
             1,
         ),
@@ -1790,3 +1814,41 @@ def test__cli__multiple_files__fix_multiple_errors_show_errors():
 
     # Assert that they are sorted in alphabetical order
     assert unfix_err_log.index(indent_pass_msg) < unfix_err_log.index(multi_fail_msg)
+
+
+def test__cli__render_fail():
+    """Basic how render fails."""
+    expected_render_output = (
+        "L:   3 | P:   8 |  TMP | Undefined jinja template " "variable: 'something'"
+    )
+
+    result = invoke_assert_code(
+        ret_code=1,
+        args=[
+            render,
+            [
+                "test/fixtures/cli/fail_many.sql",
+            ],
+        ],
+    )
+    # Check whole output. The replace command just accounts for
+    # cross platform testing.
+    assert result.output.replace("\\", "/").startswith(expected_render_output)
+
+
+def test__cli__render_pass():
+    """Basic how render works."""
+    expected_render_output = "SELECT 56 FROM sch1.tbl2"
+
+    result = invoke_assert_code(
+        ret_code=0,
+        args=[
+            render,
+            [
+                "test/fixtures/templater/jinja_a/jinja.sql",
+            ],
+        ],
+    )
+    # Check whole output. The replace command just accounts for
+    # cross platform testing.
+    assert result.output.replace("\\", "/").startswith(expected_render_output)
diff --git a/test/core/linter_test.py b/test/core/linter_test.py
--- a/test/core/linter_test.py
+++ b/test/core/linter_test.py
@@ -90,7 +90,7 @@ def test__linter__skip_large_bytes(filesize, raises_skip):
     # First check the function directly
     if raises_skip:
         with pytest.raises(SQLFluffSkipFile) as excinfo:
-            Linter._load_raw_file_and_config(
+            Linter.load_raw_file_and_config(
                 "test/fixtures/linter/indentation_errors.sql", config
             )
         assert "Skipping" in str(excinfo.value)
