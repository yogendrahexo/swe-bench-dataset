rule: L027

test_pass_qualified_references_multi_table_statements:
  pass_str: |
    SELECT foo.a, vee.b
    FROM foo
    LEFT JOIN vee ON vee.a = foo.a

test_fail_unqualified_references_multi_table_statements:
  fail_str: |
    SELECT a, b
    FROM foo
    LEFT JOIN vee ON vee.a = foo.a

test_pass_qualified_references_multi_table_statements_subquery:
  pass_str: |
    SELECT a
    FROM (
        SELECT foo.a, vee.b
        FROM foo
        LEFT JOIN vee ON vee.a = foo.a
    )

test_fail_unqualified_references_multi_table_statements_subquery:
  fail_str: |
    SELECT a
    FROM (
        SELECT a, b
        FROM foo
        LEFT JOIN vee ON vee.a = foo.a
    )

test_pass_qualified_references_multi_table_statements_subquery_mix:
  pass_str: |
    SELECT foo.a, vee.b
    FROM (
        SELECT c
        FROM bar
    ) AS foo
    LEFT JOIN vee ON vee.a = foo.a

test_allow_date_parts_as_function_parameter_bigquery:
  # Allow use of BigQuery date parts (which are not quoted and were previously
  # mistaken for column references and flagged by this rule).
  pass_str: |
    SELECT timestamp_trunc(a.ts, month) AS t
    FROM a
    JOIN b ON a.id = b.id
  configs:
    core:
      dialect: bigquery

test_allow_date_parts_as_function_parameter_snowflake:
  # Allow use of Snowflake date parts (which are not quoted and were previously
  # mistaken for column references and flagged by this rule).
  pass_str: |
    SELECT datediff(year, a.column1, b.column2)
    FROM a
    JOIN b ON a.id = b.id
  configs:
    core:
      dialect: snowflake

test_ignore_value_table_functions:
  pass_str: |
    select
        a.*,
        _t_start
    from a
    left join unnest(generate_timestamp_array(
            '2020-01-01', '2020-01-30', interval 1 day)) as _t_start
        on true
  configs:
    core:
      dialect: bigquery

test_fail_column_and_alias_same_name:
  # See issue #2169
  fail_str: |
    SELECT
        foo AS foo,
        bar AS bar
    FROM
        a LEFT JOIN b ON a.id = b.id

test_pass_column_and_alias_same_name_1:
  pass_str: |
    SELECT
        a.foo AS foo,
        b.bar AS bar
    FROM
        a LEFT JOIN b ON a.id = b.id

test_pass_column_and_alias_same_name_2:
  # Possible for unqualified columns if
  # it is actually an alias of another column.
  pass_str: |
    SELECT
        a.bar AS baz,
        baz
    FROM
        a LEFT JOIN b ON a.id = b.id

test_pass_qualified_references_multi_table_statements_mysql:
  pass_str: |
    SELECT foo.a, vee.b
    FROM foo
    LEFT JOIN vee ON vee.a = foo.a
  configs:
    core:
      dialect: mysql

test_fail_unqualified_references_multi_table_statements_mysql:
  fail_str: |
    SELECT a, b
    FROM foo
    LEFT JOIN vee ON vee.a = foo.a
  configs:
    core:
      dialect: mysql

test_fail_column_and_alias_same_name_mysql:
  # See issue #2169
  fail_str: |
    SELECT
        foo AS foo,
        bar AS bar
    FROM
        a LEFT JOIN b ON a.id = b.id
  configs:
    core:
      dialect: mysql

test_pass_column_and_alias_same_name_1_mysql:
  pass_str: |
    SELECT
        a.foo AS foo,
        b.bar AS bar
    FROM
        a LEFT JOIN b ON a.id = b.id
  configs:
    core:
      dialect: mysql

test_pass_column_and_alias_same_name_2_mysql:
  # Possible for unqualified columns if
  # it is actually an alias of another column.
  pass_str: |
    SELECT
        a.bar AS baz,
        baz
    FROM
        a LEFT JOIN b ON a.id = b.id
  configs:
    core:
      dialect: mysql

test_pass_qualified_references_multi_table_statements_tsql:
  pass_str: |
    SELECT foo.a, vee.b
    FROM foo
    LEFT JOIN vee ON vee.a = foo.a
  configs:
    core:
      dialect: tsql

test_fail_unqualified_references_multi_table_statements_tsql:
  fail_str: |
    SELECT a, b
    FROM foo
    LEFT JOIN vee ON vee.a = foo.a
  configs:
    core:
      dialect: tsql

test_fail_column_and_alias_same_name_tsql:
  # See issue #2169
  fail_str: |
    SELECT
        foo AS foo,
        bar AS bar
    FROM
        a LEFT JOIN b ON a.id = b.id
  configs:
    core:
      dialect: tsql

test_pass_column_and_alias_same_name_1_tsql:
  pass_str: |
    SELECT
        a.foo AS foo,
        b.bar AS bar
    FROM
        a LEFT JOIN b ON a.id = b.id
  configs:
    core:
      dialect: tsql

test_pass_column_and_alias_same_name_2_tsql:
  # Possible for unqualified columns if
  # it is actually an alias of another column.
  pass_str: |
    SELECT
        a.bar AS baz,
        baz
    FROM
        a LEFT JOIN b ON a.id = b.id
  configs:
    core:
      dialect: tsql

test_pass_rowtype_with_join:
  # Check we don't wrongly interpret rowtype attributes
  # as field alias when more than one tables in join
  pass_str: |
    select
        cast(row(t1.attr, t2.attr) as row(fld1 double, fld2 double)) as flds
    from sch.tab1 as t1
    join sch.tab2 as t2 on t2.id = t1.id
  configs:
    core:
      dialect: hive

test_fail_column_name_not_found_in_table_aliases_bigquery:
  # qualified reference should actually exists in table aliases
  fail_str: |
    SELECT
        a.bar,
        b.foo,
        this_is.some_struct.id
    FROM
        a LEFT JOIN b ON TRUE
  configs:
    core:
      dialect: bigquery

test_pass_column_name_is_a_struct_bigquery:
  # check structs work as expected
  pass_str: |
    SELECT
        a.bar,
        b.this_is.some_struct.id
    FROM
        a LEFT JOIN b ON TRUE
  configs:
    core:
      dialect: bigquery

test_pass_column_name_from_unnest_bigquery:
  # Check that we allow an table alias come from UNNEST statement
  pass_str: |
    SELECT
        a.bar,
        e.foo
    FROM
        a LEFT JOIN UNEST(a.events) AS e
  configs:
    core:
      dialect: bigquery
