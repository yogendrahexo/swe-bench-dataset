Decorator.toline is off by 1
### Steps to reproduce

I came across this inconsistency while debugging why pylint reports `missing-docstring` on the wrong line for the `g2` function in the example. As it turns out, the `toline` of the decorator seems to point to `b=3,` instead of `)`.

```python
import ast
import astroid

source = """\
@f(a=2,
   b=3,
)
def g2():
    pass
"""

[f] = ast.parse(source).body
[deco] = f.decorator_list
print("ast", deco.lineno, deco.end_lineno)

[f] = astroid.parse(source).body
[deco] = f.decorators.nodes
print("astroid", deco.fromlineno, deco.tolineno)
```

### Current behavior

```
ast 1 3
astroid 1 2
```

### Expected behavior

```
ast 1 3
astroid 1 3
```

### `python -c "from astroid import __pkginfo__; print(__pkginfo__.version)"` output

2.9.3


Hints:
Actually, it seems a decorator is a red herring here, because I get the same off by one issue simply parsing a call

```python
source = """\
f(a=2,
   b=3,
)
"""

[call] = ast.parse(source).body
print("ast", call.lineno, call.end_lineno)

[call] = astroid.parse(source).body
print("astroid", call.fromlineno, call.tolineno)
```

which outputs

```
ast 1 3
astroid 1 2
```
Okay, this seems to be caused by the implementation of `NodeNG.tolineno` which uses the last line of the *child* to approximate the last line of the parent:

https://github.com/PyCQA/astroid/blob/03efcc3f86b88bab3080fe69119ee4c69e4afd0a/astroid/nodes/node_ng.py#L437-L446

Once possible fix is to override `tolineno` in `Call`. Wdyt?
> this seems to be caused by the implementation of NodeNG.tolineno which uses the last line of the child to approximate the last line of the parent:

Naive question, would it be possible to use the last line of the node instead, directly in NodeNG ?
Yeah, I think that should work with a caveat that the `ast` module only reports end line/column since Python 3.8. I'll draft a PR.
@superbobry I was looking at `tolineno` recently. I was wondering if it would make sense to add a check for >= 3.8 and then just use the `end_lineno` attribute that was added recently. No need to reinvent the wheel on those versions.

Perhaps that's a bit out of the scope of the PR you were going to draft, but it might help!

Created at: 2022-01-14T21:14:48Z
Version: 2.1
