@property members defined in metaclasses of a base class are not correctly inferred
Ref https://github.com/PyCQA/astroid/issues/927#issuecomment-817244963

Inference works on the parent class but not the child in the following example:

```python
class BaseMeta(type):
    @property
    def __members__(cls):
        return ['a', 'property']
class Parent(metaclass=BaseMeta):
    pass
class Derived(Parent):
    pass
Parent.__members__  # [<Set.set l.10 at 0x...>]
Derived.__members__  # [<Property.__members__ l.8 at 0x...>]
```


Hints:
Looks like this is caused by https://github.com/PyCQA/astroid/blob/f2b197a4f8af0ceeddf435747a5c937c8632872a/astroid/scoped_nodes.py#L2590-L2603. When we are inferring an attribute on a derived class then `class_context` is `True` but `metaclass` is `False` so the property itself is returned.

Created at: 2021-04-11T11:57:22Z
Version: 2.5
