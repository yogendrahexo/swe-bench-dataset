Mypy errors
**Describe the bug**
Several of the type hints are problematic and result in mypy errors.

One example:

```none
cat << EOF > /tmp/test.py
from pydicom import Dataset, dcmread

dataset = Dataset()
dataset.Rows = 10
dataset.Columns = 20
dataset.NumberOfFrames = "5"

assert int(dataset.NumberOfFrames) == 5

filename = '/tmp/test.dcm'
dataset.save_as(str(filename))

dataset = dcmread(filename)

assert int(dataset.NumberOfFrames) == 5
EOF
```

```none
mypy /tmp/test.py
/tmp/test.py:15: error: No overload variant of "int" matches argument type "object"
/tmp/test.py:15: note: Possible overload variant:
/tmp/test.py:15: note:     def int(self, x: Union[str, bytes, SupportsInt, _SupportsIndex] = ...) -> int
/tmp/test.py:15: note:     <1 more non-matching overload not shown>
Found 1 error in 1 file (checked 1 source file)
```

**Expected behavior**
Mypy should not report any errors.

**Steps To Reproduce**
See above

**Your environment**
```none
python -m pydicom.env_info
module       | version
------       | -------
platform     | macOS-10.15.6-x86_64-i386-64bit
Python       | 3.8.6 (default, Oct  8 2020, 14:06:32)  [Clang 12.0.0 (clang-1200.0.32.2)]
pydicom      | 2.1.0
gdcm         | _module not found_
jpeg_ls      | _module not found_
numpy        | 1.19.3
PIL          | 8.0.1
```
ImportError: cannot import name 'NoReturn'
**Describe the bug**
throw following excetion when import pydicom package:
```
xxx/python3.6/site-packages/pydicom/filebase.py in <module>
5 from struct import unpack, pack
      6 from types import TracebackType
----> 7 from typing import (
      8     Tuple, Optional, NoReturn, BinaryIO, Callable, Type, Union, cast, TextIO,
      9     TYPE_CHECKING, Any

ImportError: cannot import name 'NoReturn'
```

**Expected behavior**
imort pydicom sucessfully

**Steps To Reproduce**
How to reproduce the issue. Please include a minimum working code sample, the
traceback (if any) and the anonymized DICOM dataset (if relevant).

**Your environment**
python:3.6.0
pydicom:2.1



Hints:
I ran into multiple other errors and would suggest removing `py.typed` until the type annotations have been properly tested. 
@hackermd, just for my education, since I have only dabbled in 'typing'  so far - does this break your workflow somehow?  Is it not possible to exclude pydicom from forcing errors? (other than removing `py.typed`)

Hmm, maybe we should just use `Any` for the element values rather than `object`. The problem is the element value type will be/is so broad users are pretty much going to have to `cast` everything no matter what we do.
@darcymason 

> does this break your workflow somehow

We are running mypy on all our Pyhon code and our unit test pipelines are failing. I have fixed the pydicom version to `2.0.0`, but I would like to avoid doing that moving forward.

>  Is it not possible to exclude pydicom from forcing errors? (other than removing py.typed)

One can add `#type: ingore` to exclude individual lines from type checks, but at the moment we are getting hundreds of errors.

Instead of removing `py.typed`, one could also remove the type hints from problematic functions. `object` or `Any` are not that useful and seem to cause more trouble than benefit.
@scaramallion 

> The problem is the element value type will be/is so broad users are pretty much going to have to cast everything no matter what we do

Agreed. The return value of these "magic" methods will be difficult to type. It's basically a Union of all Python types corresponding to any of the DICOM Value Representations.
@hackermd, thanks for the explanations.

I suggest doing a patch release for this if @scaramallion is in agreement.  We could just remove the `py.typed`, as suggested, and do it quickly (and push 'typing' to v2.2),  or perhaps within a few days/couple of weeks if removal of `object` can be a better solution. @scaramallion, your thoughts?  

@hackermd, would you be able to test on master if we try the correction route?

> would you be able to test on master if we try the correction route

Yes, happy to help with that. 
Yeah, lets do it. Fix #1253 and #1254 while we're at it. Pushing typing back to at least v2.2 is probably the way to go, too. 
New in 3.6.2, well that's annoying

Created at: 2020-11-04T20:55:23Z
Version: 2.1
