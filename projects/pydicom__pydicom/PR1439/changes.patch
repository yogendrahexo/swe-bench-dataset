diff --git a/pydicom/pixel_data_handlers/rle_handler.py b/pydicom/pixel_data_handlers/rle_handler.py
--- a/pydicom/pixel_data_handlers/rle_handler.py
+++ b/pydicom/pixel_data_handlers/rle_handler.py
@@ -38,6 +38,7 @@
 from struct import unpack
 import sys
 from typing import List, TYPE_CHECKING, cast
+import warnings
 
 try:
     import numpy as np
@@ -332,13 +333,20 @@ def _rle_decode_frame(
             # ii is 1, 0, 3, 2, 5, 4 for the example above
             # This is where the segment order correction occurs
             segment = _rle_decode_segment(data[offsets[ii]:offsets[ii + 1]])
-            # Check that the number of decoded pixels is correct
-            if len(segment) != rows * columns:
+
+            # Check that the number of decoded bytes is correct
+            actual_length = len(segment)
+            if actual_length < rows * columns:
                 raise ValueError(
                     "The amount of decoded RLE segment data doesn't match the "
-                    f"expected amount ({len(segment)} vs. "
+                    f"expected amount ({actual_length} vs. "
                     f"{rows * columns} bytes)"
                 )
+            elif actual_length != rows * columns:
+                warnings.warn(
+                    "The decoded RLE segment contains non-conformant padding "
+                    f"- {actual_length} vs. {rows * columns} bytes expected"
+                )
 
             if segment_order == '>':
                 byte_offset = bytes_per_sample - byte_offset - 1
@@ -346,7 +354,9 @@ def _rle_decode_frame(
             # For 100 pixel/plane, 32-bit, 3 sample data, `start` will be
             #   0, 1, 2, 3, 400, 401, 402, 403, 800, 801, 802, 803
             start = byte_offset + (sample_number * stride)
-            decoded[start:start + stride:bytes_per_sample] = segment
+            decoded[start:start + stride:bytes_per_sample] = (
+                segment[:rows * columns]
+            )
 
     return decoded
 
