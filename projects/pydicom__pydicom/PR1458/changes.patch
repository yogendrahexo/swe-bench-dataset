diff --git a/pydicom/pixel_data_handlers/numpy_handler.py b/pydicom/pixel_data_handlers/numpy_handler.py
--- a/pydicom/pixel_data_handlers/numpy_handler.py
+++ b/pydicom/pixel_data_handlers/numpy_handler.py
@@ -43,7 +43,9 @@
 | (0028,0100) | BitsAllocated             | 1    | 1, 8, 16, 32, | Required |
 |             |                           |      | 64            |          |
 +-------------+---------------------------+------+---------------+----------+
-| (0028,0103) | PixelRepresentation       | 1    | 0, 1          | Required |
+| (0028,0101) | BitsStored                | 1    | 1, 8, 12, 16  | Optional |
++-------------+---------------------------+------+---------------+----------+
+| (0028,0103) | PixelRepresentation       | 1C   | 0, 1          | Optional |
 +-------------+---------------------------+------+---------------+----------+
 
 """
@@ -284,16 +286,28 @@ def get_pixeldata(ds: "Dataset", read_only: bool = False) -> "np.ndarray":
             "the dataset"
         )
 
+    # Attributes required by both Floating Point Image Pixel Module Attributes
+    # and Image Pixel Description Macro Attributes
     required_elements = [
-        'BitsAllocated', 'Rows', 'Columns', 'PixelRepresentation',
+        'BitsAllocated', 'Rows', 'Columns',
         'SamplesPerPixel', 'PhotometricInterpretation'
     ]
+    if px_keyword[0] == 'PixelData':
+        # Attributess required by Image Pixel Description Macro Attributes
+        required_elements.extend(['PixelRepresentation', 'BitsStored'])
     missing = [elem for elem in required_elements if elem not in ds]
     if missing:
         raise AttributeError(
             "Unable to convert the pixel data as the following required "
             "elements are missing from the dataset: " + ", ".join(missing)
         )
+    if ds.SamplesPerPixel > 1:
+        if not hasattr(ds, 'PlanarConfiguration'):
+            raise AttributeError(
+                "Unable to convert the pixel data as the following "
+                "conditionally required element is missing from the dataset: "
+                "PlanarConfiguration"
+            )
 
     # May be Pixel Data, Float Pixel Data or Double Float Pixel Data
     pixel_data = getattr(ds, px_keyword[0])
