Write deflated content when called Transfer Syntax is Deflated Explicit VR Little Endian
**Describe the bug**
After using `dcmread` to read a deflated .dcm file created from pydicom's [CT_small.dcm sample](https://github.com/pydicom/pydicom/blob/v1.4.2/pydicom/data/test_files/CT_small.dcm), with the following file meta information
```
(0002, 0000) File Meta Information Group Length  UL: 178
(0002, 0001) File Meta Information Version       OB: b'\x00\x01'
(0002, 0002) Media Storage SOP Class UID         UI: CT Image Storage
(0002, 0003) Media Storage SOP Instance UID      UI: 1.3.6.1.4.1.5962.1.1.1.1.1.20040119072730.12322
(0002, 0010) Transfer Syntax UID                 UI: Deflated Explicit VR Little Endian
(0002, 0012) Implementation Class UID            UI: 1.2.40.0.13.1.1
(0002, 0013) Implementation Version Name         SH: 'dcm4che-2.0'
```

I use `save_as` to save the file. The output file has an unaltered file meta information section, but the group 8 elements and beyond are not written in deflated format, instead appearing to be LEE. In particular, the specific character set element is easily readable from a hex representation of the file, rather than appearing as gobbledygook like one would expect from a deflated stream.

**Expected behavior**
The bulk of the DCM to be written as Deflated Explicit VR Little Endian or the Transfer Syntax UID to be saved with a value that reflects the actual format of the DCM

**Steps To Reproduce**
```python
❯ py
>>> # CT_small_deflated.dcm is CT_small.dcm, deflated using dcm2dcm
>>> ds = pydicom.dcmread("CT_small_deflated.dcm")

>>> ds.save_as("ds_like_orig.dcm", write_like_original=True)
>>> pydicom.dcmread("ds_like_orig.dcm")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "C:\Users\blairyat\AppData\Local\Programs\Python\Python38-32\lib\site-packages\pydicom\filereader.py", line 869, in dcmread
    dataset = read_partial(fp, stop_when, defer_size=defer_size,
  File "C:\Users\blairyat\AppData\Local\Programs\Python\Python38-32\lib\site-packages\pydicom\filereader.py", line 729, in read_partial
    unzipped = zlib.decompress(zipped, -zlib.MAX_WBITS)
zlib.error: Error -3 while decompressing data: invalid stored block lengths

>>> ds.save_as("ds_not_like_orig.dcm", write_like_original=False)
>>> pydicom.dcmread("ds_not_like_orig.dcm")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "C:\Users\blairyat\AppData\Local\Programs\Python\Python38-32\lib\site-packages\pydicom\filereader.py", line 869, in dcmread
    dataset = read_partial(fp, stop_when, defer_size=defer_size,
  File "C:\Users\blairyat\AppData\Local\Programs\Python\Python38-32\lib\site-packages\pydicom\filereader.py", line 729, in read_partial
    unzipped = zlib.decompress(zipped, -zlib.MAX_WBITS)
zlib.error: Error -3 while decompressing data: invalid stored block lengths
```

**Your environment**
Please run the following and paste the output.
```powershell
❯ py -c "import platform; print(platform.platform())"
Windows-10-10.0.18362-SP0

❯ py -c "import sys; print('Python ', sys.version)"
Python  3.8.1 (tags/v3.8.1:1b293b6, Dec 18 2019, 22:39:24) [MSC v.1916 32 bit (Intel)]

❯ py -c "import pydicom; print('pydicom ', pydicom.__version__)"
pydicom  1.4.2
```



Hints:
Of course, it's entirely possible I'm just not using the library properly.
Regardless, here are my original and generated files, as well as the reproduction steps:
[write_deflated_file.zip](https://github.com/pydicom/pydicom/files/4557981/write_deflated_file.zip)

Thanks for your attention in this. Assuming it's deemed to be a valid bug, I'd be happy to contribute to the development of a solution. (My initial thought is that the Transfer Syntax should be respected and that the file should be written deflated, but I've not investigated deeply.)
Try setting `ds.is_explicit_VR = True` before saving. Changing the Transfer Syntax isn't enough to control the encoding of the written dataset.

We should probably add a warning for when the transfer syntax doesn't match `is_implicit_VR` and `is_little_endian`...

I'm not sure about deflated off hand, I'll need to check
Thanks, @scaramallion. That had no effect. The output is exactly the same.

I fear I may not have been clear. I never did change the Transfer Syntax. It stayed at Deflated Explicit VR Little Endian, just as it was in the source…
We don't have anything out-of-the-box for writing deflated, this should work:
```python
import zlib

from pydicom import dcmread
from pydicom.data import get_testdata_file
from pydicom.filebase import DicomBytesIO
from pydicom.filewriter import write_file_meta_info, write_dataset
from pydicom.uid import DeflatedExplicitVRLittleEndian

ds = dcmread(get_testdata_file("CT_small.dcm"))
ds.file_meta.TransferSyntaxUID = DeflatedExplicitVRLittleEndian

with open('deflated.dcm', 'wb') as f:
    # Write preamble and DICM marker
    f.write(b'\x00' * 128)
    f.write(b'DICM')
    # Write file meta information elements
    write_file_meta_info(f, ds.file_meta)

    # Encode the dataset
    bytesio = DicomBytesIO()
    bytesio.is_little_endian = True
    bytesio.is_implicit_VR = False
    write_dataset(bytesio, ds)

    # Compress the encoded data and write to file
    compressor = zlib.compressobj(wbits=-zlib.MAX_WBITS)
    deflated = compressor.compress(bytesio.parent.getvalue())
    deflated += compressor.flush()
    if len(deflated) %2:
        deflated += b'\x00'

    f.write(deflated)

ds = dcmread('deflated.dcm')
print(ds)
```
Thanks, @scaramallion. Are you looking for a contribution, or are you thinking the design would be would be too complicated for an enthusiastic experienced programmer but first-time pydicomer?
(I'm assuming this would eventually just become automatic behaviour whenever saving something with the matching Transfer Syntax…)
I think this is definitely a contribution a first-timer could make, take a look at `filewriter.dcmwrite()`, if you add a check for the deflated transfer syntax around [line 968](https://github.com/pydicom/pydicom/blob/master/pydicom/filewriter.py#L968) then encode and deflate accordingly.
> this is definitely a contribution a first-timer could make

Then sign me up! Assuming you don't need it by tomorrow. (I won't be super slow. It's just that it's nearly bedtime and I have a day job.)

There's no rush, we (nearly) all have day jobs 

Created at: 2020-05-01T16:10:56Z
Version: 1.4
